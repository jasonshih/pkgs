// Copyright 2012 Cloudera Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This is a generated file, DO NOT EDIT.
// To add new functions, see impala/common/function-registry/gen_opcodes.py

#include "exprs/opcode-registry.h"
#include "exprs/expr.h"
#include "exprs/compound-predicate.h"
#include "exprs/like-predicate.h"
#include "exprs/math-functions.h"
#include "exprs/string-functions.h"
#include "exprs/timestamp-functions.h"
#include "exprs/conditional-functions.h"
#include "exprs/utility-functions.h"
#include "opcode/functions.h"

using namespace boost::posix_time;
using namespace boost::gregorian;

namespace impala {

void OpcodeRegistry::Init() {
  this->Add(TExprOpcode::STRING_LPAD_STRINGVALUE_INT_STRINGVALUE, StringFunctions::Lpad<int32_t>);
  this->Add(TExprOpcode::STRING_LPAD_STRINGVALUE_LONG_STRINGVALUE, StringFunctions::Lpad<int64_t>);
  this->Add(TExprOpcode::STRING_PARSE_URL_STRINGVALUE_STRINGVALUE, StringFunctions::ParseUrl);
  this->Add(TExprOpcode::STRING_PARSE_URL_STRINGVALUE_STRINGVALUE_STRINGVALUE, StringFunctions::ParseUrlKey);
  this->Add(TExprOpcode::TIMESTAMP_MILLISECONDS_ADD_TIMESTAMPVALUE_INT, TimestampFunctions::TimeAddSub<true, int32_t, milliseconds>);
  this->Add(TExprOpcode::TIMESTAMP_MILLISECONDS_ADD_TIMESTAMPVALUE_LONG, TimestampFunctions::TimeAddSub<true, int64_t, milliseconds>);
  this->Add(TExprOpcode::MATH_RAND, MathFunctions::Rand);
  this->Add(TExprOpcode::MATH_RAND_INT, MathFunctions::RandSeed);
  this->Add(TExprOpcode::TIMESTAMP_MICROSECONDS_ADD_TIMESTAMPVALUE_INT, TimestampFunctions::TimeAddSub<true, int32_t, microseconds>);
  this->Add(TExprOpcode::TIMESTAMP_MICROSECONDS_ADD_TIMESTAMPVALUE_LONG, TimestampFunctions::TimeAddSub<true, int64_t, microseconds>);
  this->Add(TExprOpcode::STRING_LOCATE_STRINGVALUE_STRINGVALUE, StringFunctions::Locate);
  this->Add(TExprOpcode::STRING_LOCATE_STRINGVALUE_STRINGVALUE_INT, StringFunctions::LocatePos<int32_t>);
  this->Add(TExprOpcode::STRING_LOCATE_STRINGVALUE_STRINGVALUE_LONG, StringFunctions::LocatePos<int64_t>);
  this->Add(TExprOpcode::TIMESTAMP_WEEKS_ADD_TIMESTAMPVALUE_INT, TimestampFunctions::DateAddSub<true, int32_t, weeks>);
  this->Add(TExprOpcode::TIMESTAMP_WEEKS_ADD_TIMESTAMPVALUE_LONG, TimestampFunctions::DateAddSub<true, int64_t, weeks>);
  this->Add(TExprOpcode::TIMESTAMP_MONTH, TimestampFunctions::Month);
  this->Add(TExprOpcode::TIMESTAMP_MICROSECONDS_SUB_TIMESTAMPVALUE_INT, TimestampFunctions::TimeAddSub<false, int32_t, microseconds>);
  this->Add(TExprOpcode::TIMESTAMP_MICROSECONDS_SUB_TIMESTAMPVALUE_LONG, TimestampFunctions::TimeAddSub<false, int64_t, microseconds>);
  this->Add(TExprOpcode::MATH_ACOS, MathFunctions::Acos);
  this->Add(TExprOpcode::BITNOT_CHAR, ComputeFunctions::BitNot_char);
  this->Add(TExprOpcode::BITNOT_SHORT, ComputeFunctions::BitNot_short);
  this->Add(TExprOpcode::BITNOT_INT, ComputeFunctions::BitNot_int);
  this->Add(TExprOpcode::BITNOT_LONG, ComputeFunctions::BitNot_long);
  this->Add(TExprOpcode::CONDITIONAL_IF_BOOL_BOOL_BOOL, ConditionalFunctions::IfBool);
  this->Add(TExprOpcode::CONDITIONAL_IF_BOOL_CHAR_CHAR, ConditionalFunctions::IfTinyint);
  this->Add(TExprOpcode::CONDITIONAL_IF_BOOL_SHORT_SHORT, ConditionalFunctions::IfSmallint);
  this->Add(TExprOpcode::CONDITIONAL_IF_BOOL_INT_INT, ConditionalFunctions::IfInt);
  this->Add(TExprOpcode::CONDITIONAL_IF_BOOL_LONG_LONG, ConditionalFunctions::IfBigint);
  this->Add(TExprOpcode::CONDITIONAL_IF_BOOL_FLOAT_FLOAT, ConditionalFunctions::IfFloat);
  this->Add(TExprOpcode::CONDITIONAL_IF_BOOL_DOUBLE_DOUBLE, ConditionalFunctions::IfDouble);
  this->Add(TExprOpcode::CONDITIONAL_IF_BOOL_STRINGVALUE_STRINGVALUE, ConditionalFunctions::IfString);
  this->Add(TExprOpcode::CONDITIONAL_IF_BOOL_TIMESTAMPVALUE_TIMESTAMPVALUE, ConditionalFunctions::IfTimestamp);
  this->Add(TExprOpcode::TIMESTAMP_NOW, TimestampFunctions::Now);
  this->Add(TExprOpcode::MOD_CHAR_CHAR, ComputeFunctions::Mod_char_char);
  this->Add(TExprOpcode::MOD_SHORT_SHORT, ComputeFunctions::Mod_short_short);
  this->Add(TExprOpcode::MOD_INT_INT, ComputeFunctions::Mod_int_int);
  this->Add(TExprOpcode::MOD_LONG_LONG, ComputeFunctions::Mod_long_long);
  this->Add(TExprOpcode::CONDITIONAL_COALESCE_BOOL_VARARGS, ConditionalFunctions::CoalesceBool);
  this->Add(TExprOpcode::CONDITIONAL_COALESCE_LONG_VARARGS, ConditionalFunctions::CoalesceInt);
  this->Add(TExprOpcode::CONDITIONAL_COALESCE_DOUBLE_VARARGS, ConditionalFunctions::CoalesceFloat);
  this->Add(TExprOpcode::CONDITIONAL_COALESCE_STRINGVALUE_VARARGS, ConditionalFunctions::CoalesceString);
  this->Add(TExprOpcode::CONDITIONAL_COALESCE_TIMESTAMPVALUE_VARARGS, ConditionalFunctions::CoalesceTimestamp);
  this->Add(TExprOpcode::MATH_COS, MathFunctions::Cos);
  this->Add(TExprOpcode::MATH_BIN, MathFunctions::Bin);
  this->Add(TExprOpcode::BITAND_CHAR_CHAR, ComputeFunctions::BitAnd_char_char);
  this->Add(TExprOpcode::BITAND_SHORT_SHORT, ComputeFunctions::BitAnd_short_short);
  this->Add(TExprOpcode::BITAND_INT_INT, ComputeFunctions::BitAnd_int_int);
  this->Add(TExprOpcode::BITAND_LONG_LONG, ComputeFunctions::BitAnd_long_long);
  this->Add(TExprOpcode::MATH_SIGN, MathFunctions::Sign);
  this->Add(TExprOpcode::MATH_LOG, MathFunctions::Log);
  this->Add(TExprOpcode::DIVIDE, ComputeFunctions::Divide_double_double);
  this->Add(TExprOpcode::FROM_UTC_TIMESTAMP, TimestampFunctions::FromUtc);
  this->Add(TExprOpcode::GT_BOOL_BOOL, ComputeFunctions::Gt_bool_bool);
  this->Add(TExprOpcode::GT_CHAR_CHAR, ComputeFunctions::Gt_char_char);
  this->Add(TExprOpcode::GT_SHORT_SHORT, ComputeFunctions::Gt_short_short);
  this->Add(TExprOpcode::GT_INT_INT, ComputeFunctions::Gt_int_int);
  this->Add(TExprOpcode::GT_LONG_LONG, ComputeFunctions::Gt_long_long);
  this->Add(TExprOpcode::GT_FLOAT_FLOAT, ComputeFunctions::Gt_float_float);
  this->Add(TExprOpcode::GT_DOUBLE_DOUBLE, ComputeFunctions::Gt_double_double);
  this->Add(TExprOpcode::GT_STRINGVALUE_STRINGVALUE, ComputeFunctions::Gt_StringValue_StringValue);
  this->Add(TExprOpcode::GT_TIMESTAMPVALUE_TIMESTAMPVALUE, ComputeFunctions::Gt_TimestampValue_TimestampValue);
  this->Add(TExprOpcode::GE_BOOL_BOOL, ComputeFunctions::Ge_bool_bool);
  this->Add(TExprOpcode::GE_CHAR_CHAR, ComputeFunctions::Ge_char_char);
  this->Add(TExprOpcode::GE_SHORT_SHORT, ComputeFunctions::Ge_short_short);
  this->Add(TExprOpcode::GE_INT_INT, ComputeFunctions::Ge_int_int);
  this->Add(TExprOpcode::GE_LONG_LONG, ComputeFunctions::Ge_long_long);
  this->Add(TExprOpcode::GE_FLOAT_FLOAT, ComputeFunctions::Ge_float_float);
  this->Add(TExprOpcode::GE_DOUBLE_DOUBLE, ComputeFunctions::Ge_double_double);
  this->Add(TExprOpcode::GE_STRINGVALUE_STRINGVALUE, ComputeFunctions::Ge_StringValue_StringValue);
  this->Add(TExprOpcode::GE_TIMESTAMPVALUE_TIMESTAMPVALUE, ComputeFunctions::Ge_TimestampValue_TimestampValue);
  this->Add(TExprOpcode::TIMESTAMP_YEARS_SUB_TIMESTAMPVALUE_INT, TimestampFunctions::DateAddSub<false, int32_t, years>);
  this->Add(TExprOpcode::TIMESTAMP_YEARS_SUB_TIMESTAMPVALUE_LONG, TimestampFunctions::DateAddSub<false, int64_t, years>);
  this->Add(TExprOpcode::STRING_TRIM, StringFunctions::Trim);
  this->Add(TExprOpcode::TIMESTAMP_MINUTES_SUB_TIMESTAMPVALUE_INT, TimestampFunctions::TimeAddSub<false, int32_t, minutes>);
  this->Add(TExprOpcode::TIMESTAMP_MINUTES_SUB_TIMESTAMPVALUE_LONG, TimestampFunctions::TimeAddSub<false, int64_t, minutes>);
  this->Add(TExprOpcode::STRING_LTRIM, StringFunctions::Ltrim);
  this->Add(TExprOpcode::TIMESTAMP_HOUR, TimestampFunctions::Hour);
  this->Add(TExprOpcode::CONDITIONAL_ISNULL_BOOL_BOOL, ConditionalFunctions::IsNull);
  this->Add(TExprOpcode::CONDITIONAL_ISNULL_INT_INT, ConditionalFunctions::IsNull);
  this->Add(TExprOpcode::CONDITIONAL_ISNULL_LONG_LONG, ConditionalFunctions::IsNull);
  this->Add(TExprOpcode::CONDITIONAL_ISNULL_DOUBLE_DOUBLE, ConditionalFunctions::IsNull);
  this->Add(TExprOpcode::CONDITIONAL_ISNULL_STRINGVALUE_STRINGVALUE, ConditionalFunctions::IsNull);
  this->Add(TExprOpcode::CONDITIONAL_ISNULL_TIMESTAMPVALUE_TIMESTAMPVALUE, ConditionalFunctions::IsNull);
  this->Add(TExprOpcode::MATH_ROUND_DOUBLE, MathFunctions::Round);
  this->Add(TExprOpcode::MATH_ROUND_DOUBLE_INT, MathFunctions::RoundUpTo);
  this->Add(TExprOpcode::MATH_LN, MathFunctions::Ln);
  this->Add(TExprOpcode::TIMESTAMP_MONTHS_ADD_TIMESTAMPVALUE_INT, TimestampFunctions::DateAddSub<true, int32_t, months>);
  this->Add(TExprOpcode::TIMESTAMP_MONTHS_ADD_TIMESTAMPVALUE_LONG, TimestampFunctions::DateAddSub<true, int64_t, months>);
  this->Add(TExprOpcode::BITOR_CHAR_CHAR, ComputeFunctions::BitOr_char_char);
  this->Add(TExprOpcode::BITOR_SHORT_SHORT, ComputeFunctions::BitOr_short_short);
  this->Add(TExprOpcode::BITOR_INT_INT, ComputeFunctions::BitOr_int_int);
  this->Add(TExprOpcode::BITOR_LONG_LONG, ComputeFunctions::BitOr_long_long);
  this->Add(TExprOpcode::MATH_QUOTIENT_LONG_LONG, MathFunctions::QuotientBigInt);
  this->Add(TExprOpcode::MATH_QUOTIENT_DOUBLE_DOUBLE, MathFunctions::QuotientDouble);
  this->Add(TExprOpcode::MATH_ABS, MathFunctions::Abs);
  this->Add(TExprOpcode::TIMESTAMP_DIFF, TimestampFunctions::DateDiff);
  this->Add(TExprOpcode::MATH_POW, MathFunctions::Pow);
  this->Add(TExprOpcode::STRING_ASCII, StringFunctions::Ascii);
  this->Add(TExprOpcode::TIMESTAMP_SECONDS_ADD_TIMESTAMPVALUE_INT, TimestampFunctions::TimeAddSub<true, int32_t, seconds>);
  this->Add(TExprOpcode::TIMESTAMP_SECONDS_ADD_TIMESTAMPVALUE_LONG, TimestampFunctions::TimeAddSub<true, int64_t, seconds>);
  this->Add(TExprOpcode::INT_DIVIDE_CHAR_CHAR, ComputeFunctions::Int_Divide_char_char);
  this->Add(TExprOpcode::INT_DIVIDE_SHORT_SHORT, ComputeFunctions::Int_Divide_short_short);
  this->Add(TExprOpcode::INT_DIVIDE_INT_INT, ComputeFunctions::Int_Divide_int_int);
  this->Add(TExprOpcode::INT_DIVIDE_LONG_LONG, ComputeFunctions::Int_Divide_long_long);
  this->Add(TExprOpcode::COMPOUND_AND, CompoundPredicate::AndComputeFn);
  this->Add(TExprOpcode::MATH_SQRT, MathFunctions::Sqrt);
  this->Add(TExprOpcode::MATH_UNHEX, MathFunctions::Unhex);
  this->Add(TExprOpcode::TIMESTAMP_SECONDS_SUB_TIMESTAMPVALUE_INT, TimestampFunctions::TimeAddSub<false, int32_t, seconds>);
  this->Add(TExprOpcode::TIMESTAMP_SECONDS_SUB_TIMESTAMPVALUE_LONG, TimestampFunctions::TimeAddSub<false, int64_t, seconds>);
  this->Add(TExprOpcode::TIMESTAMP_WEEKS_SUB_TIMESTAMPVALUE_INT, TimestampFunctions::DateAddSub<false, int32_t, weeks>);
  this->Add(TExprOpcode::TIMESTAMP_WEEKS_SUB_TIMESTAMPVALUE_LONG, TimestampFunctions::DateAddSub<false, int64_t, weeks>);
  this->Add(TExprOpcode::STRING_RIGHT_STRINGVALUE_INT, StringFunctions::Right<int32_t>);
  this->Add(TExprOpcode::STRING_RIGHT_STRINGVALUE_LONG, StringFunctions::Right<int64_t>);
  this->Add(TExprOpcode::MATH_DEGREES, MathFunctions::Degrees);
  this->Add(TExprOpcode::STRING_RPAD_STRINGVALUE_INT_STRINGVALUE, StringFunctions::Rpad<int32_t>);
  this->Add(TExprOpcode::STRING_RPAD_STRINGVALUE_LONG_STRINGVALUE, StringFunctions::Rpad<int64_t>);
  this->Add(TExprOpcode::MATH_ATAN, MathFunctions::Atan);
  this->Add(TExprOpcode::TIMESTAMP_DAYS_ADD_TIMESTAMPVALUE_INT, TimestampFunctions::DateAddSub<true, int32_t, days>);
  this->Add(TExprOpcode::TIMESTAMP_DAYS_ADD_TIMESTAMPVALUE_LONG, TimestampFunctions::DateAddSub<true, int64_t, days>);
  this->Add(TExprOpcode::TIMESTAMP_DAYOFYEAR, TimestampFunctions::DayOfYear);
  this->Add(TExprOpcode::UNIX_TIMESTAMP, TimestampFunctions::Unix);
  this->Add(TExprOpcode::UNIX_TIMESTAMP_TIMESTAMPVALUE, TimestampFunctions::Unix);
  this->Add(TExprOpcode::UNIX_TIMESTAMP_STRINGVALUE_STRINGVALUE, TimestampFunctions::Unix);
  this->Add(TExprOpcode::EQ_BOOL_BOOL, ComputeFunctions::Eq_bool_bool);
  this->Add(TExprOpcode::EQ_CHAR_CHAR, ComputeFunctions::Eq_char_char);
  this->Add(TExprOpcode::EQ_SHORT_SHORT, ComputeFunctions::Eq_short_short);
  this->Add(TExprOpcode::EQ_INT_INT, ComputeFunctions::Eq_int_int);
  this->Add(TExprOpcode::EQ_LONG_LONG, ComputeFunctions::Eq_long_long);
  this->Add(TExprOpcode::EQ_FLOAT_FLOAT, ComputeFunctions::Eq_float_float);
  this->Add(TExprOpcode::EQ_DOUBLE_DOUBLE, ComputeFunctions::Eq_double_double);
  this->Add(TExprOpcode::EQ_STRINGVALUE_STRINGVALUE, ComputeFunctions::Eq_StringValue_StringValue);
  this->Add(TExprOpcode::EQ_TIMESTAMPVALUE_TIMESTAMPVALUE, ComputeFunctions::Eq_TimestampValue_TimestampValue);
  this->Add(TExprOpcode::STRING_REGEXP_REPLACE, StringFunctions::RegexpReplace);
  this->Add(TExprOpcode::REGEX, LikePredicate::RegexFn);
  this->Add(TExprOpcode::STRING_REGEXP_EXTRACT_STRINGVALUE_STRINGVALUE_INT, StringFunctions::RegexpExtract<int32_t>);
  this->Add(TExprOpcode::STRING_REGEXP_EXTRACT_STRINGVALUE_STRINGVALUE_LONG, StringFunctions::RegexpExtract<int64_t>);
  this->Add(TExprOpcode::MATH_CEIL, MathFunctions::Ceil);
  this->Add(TExprOpcode::MATH_LOG2, MathFunctions::Log2);
  this->Add(TExprOpcode::STRING_REVERSE, StringFunctions::Reverse);
  this->Add(TExprOpcode::NE_BOOL_BOOL, ComputeFunctions::Ne_bool_bool);
  this->Add(TExprOpcode::NE_CHAR_CHAR, ComputeFunctions::Ne_char_char);
  this->Add(TExprOpcode::NE_SHORT_SHORT, ComputeFunctions::Ne_short_short);
  this->Add(TExprOpcode::NE_INT_INT, ComputeFunctions::Ne_int_int);
  this->Add(TExprOpcode::NE_LONG_LONG, ComputeFunctions::Ne_long_long);
  this->Add(TExprOpcode::NE_FLOAT_FLOAT, ComputeFunctions::Ne_float_float);
  this->Add(TExprOpcode::NE_DOUBLE_DOUBLE, ComputeFunctions::Ne_double_double);
  this->Add(TExprOpcode::NE_STRINGVALUE_STRINGVALUE, ComputeFunctions::Ne_StringValue_StringValue);
  this->Add(TExprOpcode::NE_TIMESTAMPVALUE_TIMESTAMPVALUE, ComputeFunctions::Ne_TimestampValue_TimestampValue);
  this->Add(TExprOpcode::ADD_LONG_LONG, ComputeFunctions::Add_long_long);
  this->Add(TExprOpcode::ADD_DOUBLE_DOUBLE, ComputeFunctions::Add_double_double);
  this->Add(TExprOpcode::LE_BOOL_BOOL, ComputeFunctions::Le_bool_bool);
  this->Add(TExprOpcode::LE_CHAR_CHAR, ComputeFunctions::Le_char_char);
  this->Add(TExprOpcode::LE_SHORT_SHORT, ComputeFunctions::Le_short_short);
  this->Add(TExprOpcode::LE_INT_INT, ComputeFunctions::Le_int_int);
  this->Add(TExprOpcode::LE_LONG_LONG, ComputeFunctions::Le_long_long);
  this->Add(TExprOpcode::LE_FLOAT_FLOAT, ComputeFunctions::Le_float_float);
  this->Add(TExprOpcode::LE_DOUBLE_DOUBLE, ComputeFunctions::Le_double_double);
  this->Add(TExprOpcode::LE_STRINGVALUE_STRINGVALUE, ComputeFunctions::Le_StringValue_StringValue);
  this->Add(TExprOpcode::LE_TIMESTAMPVALUE_TIMESTAMPVALUE, ComputeFunctions::Le_TimestampValue_TimestampValue);
  this->Add(TExprOpcode::STRING_INSTR, StringFunctions::Instr);
  this->Add(TExprOpcode::STRING_SPACE_INT, StringFunctions::Space<int32_t>);
  this->Add(TExprOpcode::STRING_SPACE_LONG, StringFunctions::Space<int32_t>);
  this->Add(TExprOpcode::MATH_TAN, MathFunctions::Tan);
  this->Add(TExprOpcode::STRING_FIND_IN_SET, StringFunctions::FindInSet);
  this->Add(TExprOpcode::MATH_RADIANS, MathFunctions::Radians);
  this->Add(TExprOpcode::TIMESTAMP_NANOSECONDS_SUB_TIMESTAMPVALUE_INT, TimestampFunctions::TimeAddSub<false, int32_t, nanoseconds>);
  this->Add(TExprOpcode::TIMESTAMP_NANOSECONDS_SUB_TIMESTAMPVALUE_LONG, TimestampFunctions::TimeAddSub<false, int64_t, nanoseconds>);
  this->Add(TExprOpcode::TIMESTAMP_TO_DATE, TimestampFunctions::ToDate);
  this->Add(TExprOpcode::UTILITY_VERSION, UtilityFunctions::Version);
  this->Add(TExprOpcode::TIMESTAMP_WEEKOFYEAR, TimestampFunctions::WeekOfYear);
  this->Add(TExprOpcode::STRING_REPEAT_STRINGVALUE_INT, StringFunctions::Repeat<int32_t>);
  this->Add(TExprOpcode::STRING_REPEAT_STRINGVALUE_LONG, StringFunctions::Repeat<int64_t>);
  this->Add(TExprOpcode::TIMESTAMP_MILLISECONDS_SUB_TIMESTAMPVALUE_INT, TimestampFunctions::TimeAddSub<false, int32_t, milliseconds>);
  this->Add(TExprOpcode::TIMESTAMP_MILLISECONDS_SUB_TIMESTAMPVALUE_LONG, TimestampFunctions::TimeAddSub<false, int64_t, milliseconds>);
  this->Add(TExprOpcode::TO_UTC_TIMESTAMP, TimestampFunctions::ToUtc);
  this->Add(TExprOpcode::SUBTRACT_LONG_LONG, ComputeFunctions::Subtract_long_long);
  this->Add(TExprOpcode::SUBTRACT_DOUBLE_DOUBLE, ComputeFunctions::Subtract_double_double);
  this->Add(TExprOpcode::MATH_PMOD_LONG_LONG, MathFunctions::PmodBigInt);
  this->Add(TExprOpcode::MATH_PMOD_DOUBLE_DOUBLE, MathFunctions::PmodDouble);
  this->Add(TExprOpcode::TIMESTAMP_DAYS_SUB_TIMESTAMPVALUE_INT, TimestampFunctions::DateAddSub<false, int32_t, days>);
  this->Add(TExprOpcode::TIMESTAMP_DAYS_SUB_TIMESTAMPVALUE_LONG, TimestampFunctions::DateAddSub<false, int64_t, days>);
  this->Add(TExprOpcode::MULTIPLY_LONG_LONG, ComputeFunctions::Multiply_long_long);
  this->Add(TExprOpcode::MULTIPLY_DOUBLE_DOUBLE, ComputeFunctions::Multiply_double_double);
  this->Add(TExprOpcode::CONSTANT_SUBSTRING, LikePredicate::ConstantSubstringFn);
  this->Add(TExprOpcode::MATH_NEGATIVE_LONG, MathFunctions::NegativeBigInt);
  this->Add(TExprOpcode::MATH_NEGATIVE_DOUBLE, MathFunctions::NegativeDouble);
  this->Add(TExprOpcode::MATH_FLOOR, MathFunctions::Floor);
  this->Add(TExprOpcode::UTILITY_SLEEP, UtilityFunctions::Sleep);
  this->Add(TExprOpcode::LT_BOOL_BOOL, ComputeFunctions::Lt_bool_bool);
  this->Add(TExprOpcode::LT_CHAR_CHAR, ComputeFunctions::Lt_char_char);
  this->Add(TExprOpcode::LT_SHORT_SHORT, ComputeFunctions::Lt_short_short);
  this->Add(TExprOpcode::LT_INT_INT, ComputeFunctions::Lt_int_int);
  this->Add(TExprOpcode::LT_LONG_LONG, ComputeFunctions::Lt_long_long);
  this->Add(TExprOpcode::LT_FLOAT_FLOAT, ComputeFunctions::Lt_float_float);
  this->Add(TExprOpcode::LT_DOUBLE_DOUBLE, ComputeFunctions::Lt_double_double);
  this->Add(TExprOpcode::LT_STRINGVALUE_STRINGVALUE, ComputeFunctions::Lt_StringValue_StringValue);
  this->Add(TExprOpcode::LT_TIMESTAMPVALUE_TIMESTAMPVALUE, ComputeFunctions::Lt_TimestampValue_TimestampValue);
  this->Add(TExprOpcode::TIMESTAMP_HOURS_SUB_TIMESTAMPVALUE_INT, TimestampFunctions::TimeAddSub<false, int32_t, hours>);
  this->Add(TExprOpcode::TIMESTAMP_HOURS_SUB_TIMESTAMPVALUE_LONG, TimestampFunctions::TimeAddSub<false, int64_t, hours>);
  this->Add(TExprOpcode::TIMESTAMP_HOURS_ADD_TIMESTAMPVALUE_INT, TimestampFunctions::TimeAddSub<true, int32_t, hours>);
  this->Add(TExprOpcode::TIMESTAMP_HOURS_ADD_TIMESTAMPVALUE_LONG, TimestampFunctions::TimeAddSub<true, int64_t, hours>);
  this->Add(TExprOpcode::MATH_ASIN, MathFunctions::Asin);
  this->Add(TExprOpcode::MATH_EXP, MathFunctions::Exp);
  this->Add(TExprOpcode::STRING_RTRIM, StringFunctions::Rtrim);
  this->Add(TExprOpcode::FROM_UNIXTIME_INT, TimestampFunctions::FromUnix);
  this->Add(TExprOpcode::FROM_UNIXTIME_INT_STRINGVALUE, TimestampFunctions::FromUnix);
  this->Add(TExprOpcode::TIMESTAMP_YEARS_ADD_TIMESTAMPVALUE_INT, TimestampFunctions::DateAddSub<true, int32_t, years>);
  this->Add(TExprOpcode::TIMESTAMP_YEARS_ADD_TIMESTAMPVALUE_LONG, TimestampFunctions::DateAddSub<true, int64_t, years>);
  this->Add(TExprOpcode::COMPOUND_NOT, CompoundPredicate::NotComputeFn);
  this->Add(TExprOpcode::STRING_LEFT_STRINGVALUE_INT, StringFunctions::Left<int32_t>);
  this->Add(TExprOpcode::STRING_LEFT_STRINGVALUE_LONG, StringFunctions::Left<int64_t>);
  this->Add(TExprOpcode::STRING_CONCAT_WS, StringFunctions::ConcatWs);
  this->Add(TExprOpcode::TIMESTAMP_MINUTES_ADD_TIMESTAMPVALUE_INT, TimestampFunctions::TimeAddSub<true, int32_t, minutes>);
  this->Add(TExprOpcode::TIMESTAMP_MINUTES_ADD_TIMESTAMPVALUE_LONG, TimestampFunctions::TimeAddSub<true, int64_t, minutes>);
  this->Add(TExprOpcode::CONSTANT_REGEX, LikePredicate::ConstantRegexFn);
  this->Add(TExprOpcode::TIMESTAMP_DAYOFMONTH, TimestampFunctions::DayOfMonth);
  this->Add(TExprOpcode::TIMESTAMP_MINUTE, TimestampFunctions::Minute);
  this->Add(TExprOpcode::MATH_E, MathFunctions::E);
  this->Add(TExprOpcode::TIMESTAMP_YEAR, TimestampFunctions::Year);
  this->Add(TExprOpcode::STRING_LOWER, StringFunctions::Lower);
  this->Add(TExprOpcode::MATH_LOG10, MathFunctions::Log10);
  this->Add(TExprOpcode::MATH_SIN, MathFunctions::Sin);
  this->Add(TExprOpcode::CASE_BOOL, ComputeFunctions::Case_bool);
  this->Add(TExprOpcode::CASE_CHAR, ComputeFunctions::Case_char);
  this->Add(TExprOpcode::CASE_SHORT, ComputeFunctions::Case_short);
  this->Add(TExprOpcode::CASE_INT, ComputeFunctions::Case_int);
  this->Add(TExprOpcode::CASE_LONG, ComputeFunctions::Case_long);
  this->Add(TExprOpcode::CASE_FLOAT, ComputeFunctions::Case_float);
  this->Add(TExprOpcode::CASE_DOUBLE, ComputeFunctions::Case_double);
  this->Add(TExprOpcode::CASE_STRINGVALUE, ComputeFunctions::Case_StringValue);
  this->Add(TExprOpcode::CASE_TIMESTAMPVALUE, ComputeFunctions::Case_TimestampValue);
  this->Add(TExprOpcode::TIMESTAMP_NANOSECONDS_ADD_TIMESTAMPVALUE_INT, TimestampFunctions::TimeAddSub<true, int32_t, nanoseconds>);
  this->Add(TExprOpcode::TIMESTAMP_NANOSECONDS_ADD_TIMESTAMPVALUE_LONG, TimestampFunctions::TimeAddSub<true, int64_t, nanoseconds>);
  this->Add(TExprOpcode::COMPOUND_OR, CompoundPredicate::OrComputeFn);
  this->Add(TExprOpcode::LIKE, LikePredicate::LikeFn);
  this->Add(TExprOpcode::MATH_CONV_LONG_CHAR_CHAR, MathFunctions::ConvInt);
  this->Add(TExprOpcode::MATH_CONV_STRINGVALUE_CHAR_CHAR, MathFunctions::ConvString);
  this->Add(TExprOpcode::MATH_PI, MathFunctions::Pi);
  this->Add(TExprOpcode::MATH_HEX_LONG, MathFunctions::HexInt);
  this->Add(TExprOpcode::MATH_HEX_STRINGVALUE, MathFunctions::HexString);
  this->Add(TExprOpcode::CAST_BOOL_BOOL, ComputeFunctions::Cast_bool_bool);
  this->Add(TExprOpcode::CAST_CHAR_BOOL, ComputeFunctions::Cast_char_bool);
  this->Add(TExprOpcode::CAST_SHORT_BOOL, ComputeFunctions::Cast_short_bool);
  this->Add(TExprOpcode::CAST_INT_BOOL, ComputeFunctions::Cast_int_bool);
  this->Add(TExprOpcode::CAST_LONG_BOOL, ComputeFunctions::Cast_long_bool);
  this->Add(TExprOpcode::CAST_FLOAT_BOOL, ComputeFunctions::Cast_float_bool);
  this->Add(TExprOpcode::CAST_DOUBLE_BOOL, ComputeFunctions::Cast_double_bool);
  this->Add(TExprOpcode::CAST_BOOL_CHAR, ComputeFunctions::Cast_bool_char);
  this->Add(TExprOpcode::CAST_CHAR_CHAR, ComputeFunctions::Cast_char_char);
  this->Add(TExprOpcode::CAST_SHORT_CHAR, ComputeFunctions::Cast_short_char);
  this->Add(TExprOpcode::CAST_INT_CHAR, ComputeFunctions::Cast_int_char);
  this->Add(TExprOpcode::CAST_LONG_CHAR, ComputeFunctions::Cast_long_char);
  this->Add(TExprOpcode::CAST_FLOAT_CHAR, ComputeFunctions::Cast_float_char);
  this->Add(TExprOpcode::CAST_DOUBLE_CHAR, ComputeFunctions::Cast_double_char);
  this->Add(TExprOpcode::CAST_BOOL_SHORT, ComputeFunctions::Cast_bool_short);
  this->Add(TExprOpcode::CAST_CHAR_SHORT, ComputeFunctions::Cast_char_short);
  this->Add(TExprOpcode::CAST_SHORT_SHORT, ComputeFunctions::Cast_short_short);
  this->Add(TExprOpcode::CAST_INT_SHORT, ComputeFunctions::Cast_int_short);
  this->Add(TExprOpcode::CAST_LONG_SHORT, ComputeFunctions::Cast_long_short);
  this->Add(TExprOpcode::CAST_FLOAT_SHORT, ComputeFunctions::Cast_float_short);
  this->Add(TExprOpcode::CAST_DOUBLE_SHORT, ComputeFunctions::Cast_double_short);
  this->Add(TExprOpcode::CAST_BOOL_INT, ComputeFunctions::Cast_bool_int);
  this->Add(TExprOpcode::CAST_CHAR_INT, ComputeFunctions::Cast_char_int);
  this->Add(TExprOpcode::CAST_SHORT_INT, ComputeFunctions::Cast_short_int);
  this->Add(TExprOpcode::CAST_INT_INT, ComputeFunctions::Cast_int_int);
  this->Add(TExprOpcode::CAST_LONG_INT, ComputeFunctions::Cast_long_int);
  this->Add(TExprOpcode::CAST_FLOAT_INT, ComputeFunctions::Cast_float_int);
  this->Add(TExprOpcode::CAST_DOUBLE_INT, ComputeFunctions::Cast_double_int);
  this->Add(TExprOpcode::CAST_BOOL_LONG, ComputeFunctions::Cast_bool_long);
  this->Add(TExprOpcode::CAST_CHAR_LONG, ComputeFunctions::Cast_char_long);
  this->Add(TExprOpcode::CAST_SHORT_LONG, ComputeFunctions::Cast_short_long);
  this->Add(TExprOpcode::CAST_INT_LONG, ComputeFunctions::Cast_int_long);
  this->Add(TExprOpcode::CAST_LONG_LONG, ComputeFunctions::Cast_long_long);
  this->Add(TExprOpcode::CAST_FLOAT_LONG, ComputeFunctions::Cast_float_long);
  this->Add(TExprOpcode::CAST_DOUBLE_LONG, ComputeFunctions::Cast_double_long);
  this->Add(TExprOpcode::CAST_BOOL_FLOAT, ComputeFunctions::Cast_bool_float);
  this->Add(TExprOpcode::CAST_CHAR_FLOAT, ComputeFunctions::Cast_char_float);
  this->Add(TExprOpcode::CAST_SHORT_FLOAT, ComputeFunctions::Cast_short_float);
  this->Add(TExprOpcode::CAST_INT_FLOAT, ComputeFunctions::Cast_int_float);
  this->Add(TExprOpcode::CAST_LONG_FLOAT, ComputeFunctions::Cast_long_float);
  this->Add(TExprOpcode::CAST_FLOAT_FLOAT, ComputeFunctions::Cast_float_float);
  this->Add(TExprOpcode::CAST_DOUBLE_FLOAT, ComputeFunctions::Cast_double_float);
  this->Add(TExprOpcode::CAST_BOOL_DOUBLE, ComputeFunctions::Cast_bool_double);
  this->Add(TExprOpcode::CAST_CHAR_DOUBLE, ComputeFunctions::Cast_char_double);
  this->Add(TExprOpcode::CAST_SHORT_DOUBLE, ComputeFunctions::Cast_short_double);
  this->Add(TExprOpcode::CAST_INT_DOUBLE, ComputeFunctions::Cast_int_double);
  this->Add(TExprOpcode::CAST_LONG_DOUBLE, ComputeFunctions::Cast_long_double);
  this->Add(TExprOpcode::CAST_FLOAT_DOUBLE, ComputeFunctions::Cast_float_double);
  this->Add(TExprOpcode::CAST_DOUBLE_DOUBLE, ComputeFunctions::Cast_double_double);
  this->Add(TExprOpcode::CAST_STRINGVALUE_CHAR, ComputeFunctions::Cast_StringValue_char);
  this->Add(TExprOpcode::CAST_STRINGVALUE_SHORT, ComputeFunctions::Cast_StringValue_short);
  this->Add(TExprOpcode::CAST_STRINGVALUE_INT, ComputeFunctions::Cast_StringValue_int);
  this->Add(TExprOpcode::CAST_STRINGVALUE_LONG, ComputeFunctions::Cast_StringValue_long);
  this->Add(TExprOpcode::CAST_STRINGVALUE_FLOAT, ComputeFunctions::Cast_StringValue_float);
  this->Add(TExprOpcode::CAST_STRINGVALUE_DOUBLE, ComputeFunctions::Cast_StringValue_double);
  this->Add(TExprOpcode::CAST_BOOL_STRINGVALUE, ComputeFunctions::Cast_bool_StringValue);
  this->Add(TExprOpcode::CAST_SHORT_STRINGVALUE, ComputeFunctions::Cast_short_StringValue);
  this->Add(TExprOpcode::CAST_INT_STRINGVALUE, ComputeFunctions::Cast_int_StringValue);
  this->Add(TExprOpcode::CAST_LONG_STRINGVALUE, ComputeFunctions::Cast_long_StringValue);
  this->Add(TExprOpcode::CAST_FLOAT_STRINGVALUE, ComputeFunctions::Cast_float_StringValue);
  this->Add(TExprOpcode::CAST_DOUBLE_STRINGVALUE, ComputeFunctions::Cast_double_StringValue);
  this->Add(TExprOpcode::CAST_CHAR_STRINGVALUE, ComputeFunctions::Cast_char_StringValue);
  this->Add(TExprOpcode::CAST_TIMESTAMPVALUE_BOOL, ComputeFunctions::Cast_TimestampValue_bool);
  this->Add(TExprOpcode::CAST_TIMESTAMPVALUE_CHAR, ComputeFunctions::Cast_TimestampValue_char);
  this->Add(TExprOpcode::CAST_TIMESTAMPVALUE_SHORT, ComputeFunctions::Cast_TimestampValue_short);
  this->Add(TExprOpcode::CAST_TIMESTAMPVALUE_INT, ComputeFunctions::Cast_TimestampValue_int);
  this->Add(TExprOpcode::CAST_TIMESTAMPVALUE_LONG, ComputeFunctions::Cast_TimestampValue_long);
  this->Add(TExprOpcode::CAST_TIMESTAMPVALUE_FLOAT, ComputeFunctions::Cast_TimestampValue_float);
  this->Add(TExprOpcode::CAST_TIMESTAMPVALUE_DOUBLE, ComputeFunctions::Cast_TimestampValue_double);
  this->Add(TExprOpcode::CAST_TIMESTAMPVALUE_STRINGVALUE, ComputeFunctions::Cast_TimestampValue_StringValue);
  this->Add(TExprOpcode::CAST_STRINGVALUE_TIMESTAMPVALUE, ComputeFunctions::Cast_StringValue_TimestampValue);
  this->Add(TExprOpcode::CAST_BOOL_TIMESTAMPVALUE, ComputeFunctions::Cast_bool_TimestampValue);
  this->Add(TExprOpcode::CAST_CHAR_TIMESTAMPVALUE, ComputeFunctions::Cast_char_TimestampValue);
  this->Add(TExprOpcode::CAST_SHORT_TIMESTAMPVALUE, ComputeFunctions::Cast_short_TimestampValue);
  this->Add(TExprOpcode::CAST_INT_TIMESTAMPVALUE, ComputeFunctions::Cast_int_TimestampValue);
  this->Add(TExprOpcode::CAST_LONG_TIMESTAMPVALUE, ComputeFunctions::Cast_long_TimestampValue);
  this->Add(TExprOpcode::CAST_FLOAT_TIMESTAMPVALUE, ComputeFunctions::Cast_float_TimestampValue);
  this->Add(TExprOpcode::CAST_DOUBLE_TIMESTAMPVALUE, ComputeFunctions::Cast_double_TimestampValue);
  this->Add(TExprOpcode::TIMESTAMP_MONTHS_SUB_TIMESTAMPVALUE_INT, TimestampFunctions::DateAddSub<false, int32_t, months>);
  this->Add(TExprOpcode::TIMESTAMP_MONTHS_SUB_TIMESTAMPVALUE_LONG, TimestampFunctions::DateAddSub<false, int64_t, months>);
  this->Add(TExprOpcode::BITXOR_CHAR_CHAR, ComputeFunctions::BitXor_char_char);
  this->Add(TExprOpcode::BITXOR_SHORT_SHORT, ComputeFunctions::BitXor_short_short);
  this->Add(TExprOpcode::BITXOR_INT_INT, ComputeFunctions::BitXor_int_int);
  this->Add(TExprOpcode::BITXOR_LONG_LONG, ComputeFunctions::BitXor_long_long);
  this->Add(TExprOpcode::TIMESTAMP_SECOND, TimestampFunctions::Second);
  this->Add(TExprOpcode::STRING_SUBSTRING_STRINGVALUE_INT, StringFunctions::Substring<int32_t>);
  this->Add(TExprOpcode::STRING_SUBSTRING_STRINGVALUE_LONG, StringFunctions::Substring<int64_t>);
  this->Add(TExprOpcode::STRING_SUBSTRING_STRINGVALUE_INT_INT, StringFunctions::Substring<int32_t>);
  this->Add(TExprOpcode::STRING_SUBSTRING_STRINGVALUE_LONG_LONG, StringFunctions::Substring<int64_t>);
  this->Add(TExprOpcode::STRING_UPPER, StringFunctions::Upper);
  this->Add(TExprOpcode::MATH_POSITIVE_LONG, MathFunctions::PositiveBigInt);
  this->Add(TExprOpcode::MATH_POSITIVE_DOUBLE, MathFunctions::PositiveDouble);
  this->Add(TExprOpcode::STRING_CONCAT, StringFunctions::Concat);
  this->Add(TExprOpcode::STRING_LENGTH, StringFunctions::Length);
}

}

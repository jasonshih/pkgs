/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "DataSinks_types.h"

#include <algorithm>

namespace impala {

int _kTDataSinkTypeValues[] = {
  TDataSinkType::DATA_STREAM_SINK,
  TDataSinkType::TABLE_SINK
};
const char* _kTDataSinkTypeNames[] = {
  "DATA_STREAM_SINK",
  "TABLE_SINK"
};
const std::map<int, const char*> _TDataSinkType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kTDataSinkTypeValues, _kTDataSinkTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTTableSinkTypeValues[] = {
  TTableSinkType::HDFS,
  TTableSinkType::HBASE
};
const char* _kTTableSinkTypeNames[] = {
  "HDFS",
  "HBASE"
};
const std::map<int, const char*> _TTableSinkType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kTTableSinkTypeValues, _kTTableSinkTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* TDataStreamSink::ascii_fingerprint = "24B01F8D09D53A103AB9B54EF8FACBCA";
const uint8_t TDataStreamSink::binary_fingerprint[16] = {0x24,0xB0,0x1F,0x8D,0x09,0xD5,0x3A,0x10,0x3A,0xB9,0xB5,0x4E,0xF8,0xFA,0xCB,0xCA};

uint32_t TDataStreamSink::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_dest_node_id = false;
  bool isset_output_partition = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dest_node_id);
          isset_dest_node_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->output_partition.read(iprot);
          isset_output_partition = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_dest_node_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_output_partition)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TDataStreamSink::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  uint32_t fcnt = 0;
  xfer += oprot->writeStructBegin("TDataStreamSink");

  ++fcnt;
  xfer += oprot->writeFieldBegin("dest_node_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->dest_node_id);
  xfer += oprot->writeFieldEnd();

  ++fcnt;
  xfer += oprot->writeFieldBegin("output_partition", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->output_partition.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDataStreamSink &a, TDataStreamSink &b) {
  using ::std::swap;
  swap(a.dest_node_id, b.dest_node_id);
  swap(a.output_partition, b.output_partition);
}

const char* THdfsTableSink::ascii_fingerprint = "3C95F3890FF8DE89139D0752B20A527D";
const uint8_t THdfsTableSink::binary_fingerprint[16] = {0x3C,0x95,0xF3,0x89,0x0F,0xF8,0xDE,0x89,0x13,0x9D,0x07,0x52,0xB2,0x0A,0x52,0x7D};

uint32_t THdfsTableSink::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_partition_key_exprs = false;
  bool isset_overwrite = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->partition_key_exprs.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->partition_key_exprs.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += this->partition_key_exprs[_i4].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_partition_key_exprs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->overwrite);
          isset_overwrite = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_partition_key_exprs)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_overwrite)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t THdfsTableSink::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  uint32_t fcnt = 0;
  xfer += oprot->writeStructBegin("THdfsTableSink");

  ++fcnt;
  xfer += oprot->writeFieldBegin("partition_key_exprs", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->partition_key_exprs.size()));
    std::vector< ::impala::TExpr> ::const_iterator _iter5;
    for (_iter5 = this->partition_key_exprs.begin(); _iter5 != this->partition_key_exprs.end(); ++_iter5)
    {
      xfer += (*_iter5).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  ++fcnt;
  xfer += oprot->writeFieldBegin("overwrite", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->overwrite);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(THdfsTableSink &a, THdfsTableSink &b) {
  using ::std::swap;
  swap(a.partition_key_exprs, b.partition_key_exprs);
  swap(a.overwrite, b.overwrite);
}

const char* TTableSink::ascii_fingerprint = "A54E12003FE46272907559DA39173DF6";
const uint8_t TTableSink::binary_fingerprint[16] = {0xA5,0x4E,0x12,0x00,0x3F,0xE4,0x62,0x72,0x90,0x75,0x59,0xDA,0x39,0x17,0x3D,0xF6};

uint32_t TTableSink::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_target_table_id = false;
  bool isset_type = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->target_table_id);
          isset_target_table_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast6;
          xfer += iprot->readI32(ecast6);
          this->type = (TTableSinkType::type)ecast6;
          isset_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->hdfs_table_sink.read(iprot);
          this->__isset.hdfs_table_sink = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_target_table_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TTableSink::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  uint32_t fcnt = 0;
  xfer += oprot->writeStructBegin("TTableSink");

  ++fcnt;
  xfer += oprot->writeFieldBegin("target_table_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->target_table_id);
  xfer += oprot->writeFieldEnd();

  ++fcnt;
  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.hdfs_table_sink) {
    ++fcnt;
    xfer += oprot->writeFieldBegin("hdfs_table_sink", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->hdfs_table_sink.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TTableSink &a, TTableSink &b) {
  using ::std::swap;
  swap(a.target_table_id, b.target_table_id);
  swap(a.type, b.type);
  swap(a.hdfs_table_sink, b.hdfs_table_sink);
  swap(a.__isset, b.__isset);
}

const char* TDataSink::ascii_fingerprint = "328B992767024E7D83E9B93D3D5FBF28";
const uint8_t TDataSink::binary_fingerprint[16] = {0x32,0x8B,0x99,0x27,0x67,0x02,0x4E,0x7D,0x83,0xE9,0xB9,0x3D,0x3D,0x5F,0xBF,0x28};

uint32_t TDataSink::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast7;
          xfer += iprot->readI32(ecast7);
          this->type = (TDataSinkType::type)ecast7;
          isset_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->stream_sink.read(iprot);
          this->__isset.stream_sink = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->table_sink.read(iprot);
          this->__isset.table_sink = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TDataSink::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  uint32_t fcnt = 0;
  xfer += oprot->writeStructBegin("TDataSink");

  ++fcnt;
  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.stream_sink) {
    ++fcnt;
    xfer += oprot->writeFieldBegin("stream_sink", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->stream_sink.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.table_sink) {
    ++fcnt;
    xfer += oprot->writeFieldBegin("table_sink", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->table_sink.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDataSink &a, TDataSink &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.stream_sink, b.stream_sink);
  swap(a.table_sink, b.table_sink);
  swap(a.__isset, b.__isset);
}

} // namespace

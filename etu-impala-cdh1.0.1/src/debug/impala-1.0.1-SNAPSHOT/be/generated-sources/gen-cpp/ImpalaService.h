/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ImpalaService_H
#define ImpalaService_H

#include <thrift/TDispatchProcessor.h>
#include "ImpalaService_types.h"
#include "BeeswaxService.h"

namespace impala {

class ImpalaServiceIf : virtual public  ::beeswax::BeeswaxServiceIf {
 public:
  virtual ~ImpalaServiceIf() {}
  virtual void Cancel( ::impala::TStatus& _return, const  ::beeswax::QueryHandle& query_id) = 0;
  virtual void ResetCatalog( ::impala::TStatus& _return) = 0;
  virtual void ResetTable( ::impala::TStatus& _return, const TResetTableReq& request) = 0;
  virtual void GetRuntimeProfile(std::string& _return, const  ::beeswax::QueryHandle& query_id) = 0;
  virtual void CloseInsert(TInsertResult& _return, const  ::beeswax::QueryHandle& handle) = 0;
  virtual void PingImpalaService(TPingImpalaServiceResp& _return) = 0;
};

class ImpalaServiceIfFactory : virtual public  ::beeswax::BeeswaxServiceIfFactory {
 public:
  typedef ImpalaServiceIf Handler;

  virtual ~ImpalaServiceIfFactory() {}

  virtual ImpalaServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler( ::beeswax::BeeswaxServiceIf* /* handler */) = 0;
};

class ImpalaServiceIfSingletonFactory : virtual public ImpalaServiceIfFactory {
 public:
  ImpalaServiceIfSingletonFactory(const boost::shared_ptr<ImpalaServiceIf>& iface) : iface_(iface) {}
  virtual ~ImpalaServiceIfSingletonFactory() {}

  virtual ImpalaServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler( ::beeswax::BeeswaxServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<ImpalaServiceIf> iface_;
};

class ImpalaServiceNull : virtual public ImpalaServiceIf , virtual public  ::beeswax::BeeswaxServiceNull {
 public:
  virtual ~ImpalaServiceNull() {}
  void Cancel( ::impala::TStatus& /* _return */, const  ::beeswax::QueryHandle& /* query_id */) {
    return;
  }
  void ResetCatalog( ::impala::TStatus& /* _return */) {
    return;
  }
  void ResetTable( ::impala::TStatus& /* _return */, const TResetTableReq& /* request */) {
    return;
  }
  void GetRuntimeProfile(std::string& /* _return */, const  ::beeswax::QueryHandle& /* query_id */) {
    return;
  }
  void CloseInsert(TInsertResult& /* _return */, const  ::beeswax::QueryHandle& /* handle */) {
    return;
  }
  void PingImpalaService(TPingImpalaServiceResp& /* _return */) {
    return;
  }
};

typedef struct _ImpalaService_Cancel_args__isset {
  _ImpalaService_Cancel_args__isset() : query_id(false) {}
  bool query_id;
} _ImpalaService_Cancel_args__isset;

class ImpalaService_Cancel_args {
 public:

  ImpalaService_Cancel_args() {
  }

  virtual ~ImpalaService_Cancel_args() throw() {}

   ::beeswax::QueryHandle query_id;

  _ImpalaService_Cancel_args__isset __isset;

  void __set_query_id(const  ::beeswax::QueryHandle& val) {
    query_id = val;
    __isset.query_id = true;
  }

  bool operator == (const ImpalaService_Cancel_args & rhs) const
  {
    if (!(query_id == rhs.query_id))
      return false;
    return true;
  }
  bool operator != (const ImpalaService_Cancel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImpalaService_Cancel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ImpalaService_Cancel_pargs {
 public:


  virtual ~ImpalaService_Cancel_pargs() throw() {}

  const  ::beeswax::QueryHandle* query_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ImpalaService_Cancel_result__isset {
  _ImpalaService_Cancel_result__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _ImpalaService_Cancel_result__isset;

class ImpalaService_Cancel_result {
 public:

  ImpalaService_Cancel_result() {
  }

  virtual ~ImpalaService_Cancel_result() throw() {}

   ::impala::TStatus success;
   ::beeswax::BeeswaxException error;

  _ImpalaService_Cancel_result__isset __isset;

  void __set_success(const  ::impala::TStatus& val) {
    success = val;
    __isset.success = true;
  }

  void __set_error(const  ::beeswax::BeeswaxException& val) {
    error = val;
    __isset.error = true;
  }

  bool operator == (const ImpalaService_Cancel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const ImpalaService_Cancel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImpalaService_Cancel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ImpalaService_Cancel_presult__isset {
  _ImpalaService_Cancel_presult__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _ImpalaService_Cancel_presult__isset;

class ImpalaService_Cancel_presult {
 public:


  virtual ~ImpalaService_Cancel_presult() throw() {}

   ::impala::TStatus* success;
   ::beeswax::BeeswaxException error;

  _ImpalaService_Cancel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ImpalaService_ResetCatalog_args {
 public:

  ImpalaService_ResetCatalog_args() {
  }

  virtual ~ImpalaService_ResetCatalog_args() throw() {}


  bool operator == (const ImpalaService_ResetCatalog_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ImpalaService_ResetCatalog_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImpalaService_ResetCatalog_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ImpalaService_ResetCatalog_pargs {
 public:


  virtual ~ImpalaService_ResetCatalog_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ImpalaService_ResetCatalog_result__isset {
  _ImpalaService_ResetCatalog_result__isset() : success(false) {}
  bool success;
} _ImpalaService_ResetCatalog_result__isset;

class ImpalaService_ResetCatalog_result {
 public:

  ImpalaService_ResetCatalog_result() {
  }

  virtual ~ImpalaService_ResetCatalog_result() throw() {}

   ::impala::TStatus success;

  _ImpalaService_ResetCatalog_result__isset __isset;

  void __set_success(const  ::impala::TStatus& val) {
    success = val;
    __isset.success = true;
  }

  bool operator == (const ImpalaService_ResetCatalog_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ImpalaService_ResetCatalog_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImpalaService_ResetCatalog_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ImpalaService_ResetCatalog_presult__isset {
  _ImpalaService_ResetCatalog_presult__isset() : success(false) {}
  bool success;
} _ImpalaService_ResetCatalog_presult__isset;

class ImpalaService_ResetCatalog_presult {
 public:


  virtual ~ImpalaService_ResetCatalog_presult() throw() {}

   ::impala::TStatus* success;

  _ImpalaService_ResetCatalog_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ImpalaService_ResetTable_args__isset {
  _ImpalaService_ResetTable_args__isset() : request(false) {}
  bool request;
} _ImpalaService_ResetTable_args__isset;

class ImpalaService_ResetTable_args {
 public:

  ImpalaService_ResetTable_args() {
  }

  virtual ~ImpalaService_ResetTable_args() throw() {}

  TResetTableReq request;

  _ImpalaService_ResetTable_args__isset __isset;

  void __set_request(const TResetTableReq& val) {
    request = val;
    __isset.request = true;
  }

  bool operator == (const ImpalaService_ResetTable_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const ImpalaService_ResetTable_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImpalaService_ResetTable_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ImpalaService_ResetTable_pargs {
 public:


  virtual ~ImpalaService_ResetTable_pargs() throw() {}

  const TResetTableReq* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ImpalaService_ResetTable_result__isset {
  _ImpalaService_ResetTable_result__isset() : success(false) {}
  bool success;
} _ImpalaService_ResetTable_result__isset;

class ImpalaService_ResetTable_result {
 public:

  ImpalaService_ResetTable_result() {
  }

  virtual ~ImpalaService_ResetTable_result() throw() {}

   ::impala::TStatus success;

  _ImpalaService_ResetTable_result__isset __isset;

  void __set_success(const  ::impala::TStatus& val) {
    success = val;
    __isset.success = true;
  }

  bool operator == (const ImpalaService_ResetTable_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ImpalaService_ResetTable_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImpalaService_ResetTable_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ImpalaService_ResetTable_presult__isset {
  _ImpalaService_ResetTable_presult__isset() : success(false) {}
  bool success;
} _ImpalaService_ResetTable_presult__isset;

class ImpalaService_ResetTable_presult {
 public:


  virtual ~ImpalaService_ResetTable_presult() throw() {}

   ::impala::TStatus* success;

  _ImpalaService_ResetTable_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ImpalaService_GetRuntimeProfile_args__isset {
  _ImpalaService_GetRuntimeProfile_args__isset() : query_id(false) {}
  bool query_id;
} _ImpalaService_GetRuntimeProfile_args__isset;

class ImpalaService_GetRuntimeProfile_args {
 public:

  ImpalaService_GetRuntimeProfile_args() {
  }

  virtual ~ImpalaService_GetRuntimeProfile_args() throw() {}

   ::beeswax::QueryHandle query_id;

  _ImpalaService_GetRuntimeProfile_args__isset __isset;

  void __set_query_id(const  ::beeswax::QueryHandle& val) {
    query_id = val;
    __isset.query_id = true;
  }

  bool operator == (const ImpalaService_GetRuntimeProfile_args & rhs) const
  {
    if (!(query_id == rhs.query_id))
      return false;
    return true;
  }
  bool operator != (const ImpalaService_GetRuntimeProfile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImpalaService_GetRuntimeProfile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ImpalaService_GetRuntimeProfile_pargs {
 public:


  virtual ~ImpalaService_GetRuntimeProfile_pargs() throw() {}

  const  ::beeswax::QueryHandle* query_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ImpalaService_GetRuntimeProfile_result__isset {
  _ImpalaService_GetRuntimeProfile_result__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _ImpalaService_GetRuntimeProfile_result__isset;

class ImpalaService_GetRuntimeProfile_result {
 public:

  ImpalaService_GetRuntimeProfile_result() : success() {
  }

  virtual ~ImpalaService_GetRuntimeProfile_result() throw() {}

  std::string success;
   ::beeswax::BeeswaxException error;

  _ImpalaService_GetRuntimeProfile_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
    __isset.success = true;
  }

  void __set_error(const  ::beeswax::BeeswaxException& val) {
    error = val;
    __isset.error = true;
  }

  bool operator == (const ImpalaService_GetRuntimeProfile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const ImpalaService_GetRuntimeProfile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImpalaService_GetRuntimeProfile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ImpalaService_GetRuntimeProfile_presult__isset {
  _ImpalaService_GetRuntimeProfile_presult__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _ImpalaService_GetRuntimeProfile_presult__isset;

class ImpalaService_GetRuntimeProfile_presult {
 public:


  virtual ~ImpalaService_GetRuntimeProfile_presult() throw() {}

  std::string* success;
   ::beeswax::BeeswaxException error;

  _ImpalaService_GetRuntimeProfile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ImpalaService_CloseInsert_args__isset {
  _ImpalaService_CloseInsert_args__isset() : handle(false) {}
  bool handle;
} _ImpalaService_CloseInsert_args__isset;

class ImpalaService_CloseInsert_args {
 public:

  ImpalaService_CloseInsert_args() {
  }

  virtual ~ImpalaService_CloseInsert_args() throw() {}

   ::beeswax::QueryHandle handle;

  _ImpalaService_CloseInsert_args__isset __isset;

  void __set_handle(const  ::beeswax::QueryHandle& val) {
    handle = val;
    __isset.handle = true;
  }

  bool operator == (const ImpalaService_CloseInsert_args & rhs) const
  {
    if (!(handle == rhs.handle))
      return false;
    return true;
  }
  bool operator != (const ImpalaService_CloseInsert_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImpalaService_CloseInsert_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ImpalaService_CloseInsert_pargs {
 public:


  virtual ~ImpalaService_CloseInsert_pargs() throw() {}

  const  ::beeswax::QueryHandle* handle;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ImpalaService_CloseInsert_result__isset {
  _ImpalaService_CloseInsert_result__isset() : success(false), error(false), error2(false) {}
  bool success;
  bool error;
  bool error2;
} _ImpalaService_CloseInsert_result__isset;

class ImpalaService_CloseInsert_result {
 public:

  ImpalaService_CloseInsert_result() {
  }

  virtual ~ImpalaService_CloseInsert_result() throw() {}

  TInsertResult success;
   ::beeswax::QueryNotFoundException error;
   ::beeswax::BeeswaxException error2;

  _ImpalaService_CloseInsert_result__isset __isset;

  void __set_success(const TInsertResult& val) {
    success = val;
    __isset.success = true;
  }

  void __set_error(const  ::beeswax::QueryNotFoundException& val) {
    error = val;
    __isset.error = true;
  }

  void __set_error2(const  ::beeswax::BeeswaxException& val) {
    error2 = val;
    __isset.error2 = true;
  }

  bool operator == (const ImpalaService_CloseInsert_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    if (!(error2 == rhs.error2))
      return false;
    return true;
  }
  bool operator != (const ImpalaService_CloseInsert_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImpalaService_CloseInsert_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ImpalaService_CloseInsert_presult__isset {
  _ImpalaService_CloseInsert_presult__isset() : success(false), error(false), error2(false) {}
  bool success;
  bool error;
  bool error2;
} _ImpalaService_CloseInsert_presult__isset;

class ImpalaService_CloseInsert_presult {
 public:


  virtual ~ImpalaService_CloseInsert_presult() throw() {}

  TInsertResult* success;
   ::beeswax::QueryNotFoundException error;
   ::beeswax::BeeswaxException error2;

  _ImpalaService_CloseInsert_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ImpalaService_PingImpalaService_args {
 public:

  ImpalaService_PingImpalaService_args() {
  }

  virtual ~ImpalaService_PingImpalaService_args() throw() {}


  bool operator == (const ImpalaService_PingImpalaService_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ImpalaService_PingImpalaService_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImpalaService_PingImpalaService_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ImpalaService_PingImpalaService_pargs {
 public:


  virtual ~ImpalaService_PingImpalaService_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ImpalaService_PingImpalaService_result__isset {
  _ImpalaService_PingImpalaService_result__isset() : success(false) {}
  bool success;
} _ImpalaService_PingImpalaService_result__isset;

class ImpalaService_PingImpalaService_result {
 public:

  ImpalaService_PingImpalaService_result() {
  }

  virtual ~ImpalaService_PingImpalaService_result() throw() {}

  TPingImpalaServiceResp success;

  _ImpalaService_PingImpalaService_result__isset __isset;

  void __set_success(const TPingImpalaServiceResp& val) {
    success = val;
    __isset.success = true;
  }

  bool operator == (const ImpalaService_PingImpalaService_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ImpalaService_PingImpalaService_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImpalaService_PingImpalaService_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ImpalaService_PingImpalaService_presult__isset {
  _ImpalaService_PingImpalaService_presult__isset() : success(false) {}
  bool success;
} _ImpalaService_PingImpalaService_presult__isset;

class ImpalaService_PingImpalaService_presult {
 public:


  virtual ~ImpalaService_PingImpalaService_presult() throw() {}

  TPingImpalaServiceResp* success;

  _ImpalaService_PingImpalaService_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ImpalaServiceClient : virtual public ImpalaServiceIf, public  ::beeswax::BeeswaxServiceClient {
 public:
  ImpalaServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
     ::beeswax::BeeswaxServiceClient(prot, prot) {}
  ImpalaServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
     ::beeswax::BeeswaxServiceClient(iprot, oprot) {}
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Cancel( ::impala::TStatus& _return, const  ::beeswax::QueryHandle& query_id);
  void send_Cancel(const  ::beeswax::QueryHandle& query_id);
  void recv_Cancel( ::impala::TStatus& _return);
  void ResetCatalog( ::impala::TStatus& _return);
  void send_ResetCatalog();
  void recv_ResetCatalog( ::impala::TStatus& _return);
  void ResetTable( ::impala::TStatus& _return, const TResetTableReq& request);
  void send_ResetTable(const TResetTableReq& request);
  void recv_ResetTable( ::impala::TStatus& _return);
  void GetRuntimeProfile(std::string& _return, const  ::beeswax::QueryHandle& query_id);
  void send_GetRuntimeProfile(const  ::beeswax::QueryHandle& query_id);
  void recv_GetRuntimeProfile(std::string& _return);
  void CloseInsert(TInsertResult& _return, const  ::beeswax::QueryHandle& handle);
  void send_CloseInsert(const  ::beeswax::QueryHandle& handle);
  void recv_CloseInsert(TInsertResult& _return);
  void PingImpalaService(TPingImpalaServiceResp& _return);
  void send_PingImpalaService();
  void recv_PingImpalaService(TPingImpalaServiceResp& _return);
};

class ImpalaServiceProcessor : public  ::beeswax::BeeswaxServiceProcessor {
 protected:
  boost::shared_ptr<ImpalaServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ImpalaServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_Cancel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ResetCatalog(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ResetTable(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetRuntimeProfile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_CloseInsert(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PingImpalaService(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ImpalaServiceProcessor(boost::shared_ptr<ImpalaServiceIf> iface) :
     ::beeswax::BeeswaxServiceProcessor(iface),
    iface_(iface) {
    processMap_["Cancel"] = &ImpalaServiceProcessor::process_Cancel;
    processMap_["ResetCatalog"] = &ImpalaServiceProcessor::process_ResetCatalog;
    processMap_["ResetTable"] = &ImpalaServiceProcessor::process_ResetTable;
    processMap_["GetRuntimeProfile"] = &ImpalaServiceProcessor::process_GetRuntimeProfile;
    processMap_["CloseInsert"] = &ImpalaServiceProcessor::process_CloseInsert;
    processMap_["PingImpalaService"] = &ImpalaServiceProcessor::process_PingImpalaService;
  }

  virtual ~ImpalaServiceProcessor() {}
};

class ImpalaServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ImpalaServiceProcessorFactory(const ::boost::shared_ptr< ImpalaServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ImpalaServiceIfFactory > handlerFactory_;
};

class ImpalaServiceMultiface : virtual public ImpalaServiceIf, public  ::beeswax::BeeswaxServiceMultiface {
 public:
  ImpalaServiceMultiface(std::vector<boost::shared_ptr<ImpalaServiceIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<boost::shared_ptr<ImpalaServiceIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
       ::beeswax::BeeswaxServiceMultiface::add(*iter);
    }
  }
  virtual ~ImpalaServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ImpalaServiceIf> > ifaces_;
  ImpalaServiceMultiface() {}
  void add(boost::shared_ptr<ImpalaServiceIf> iface) {
     ::beeswax::BeeswaxServiceMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  void Cancel( ::impala::TStatus& _return, const  ::beeswax::QueryHandle& query_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Cancel(_return, query_id);
    }
    ifaces_[i]->Cancel(_return, query_id);
    return;
  }

  void ResetCatalog( ::impala::TStatus& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ResetCatalog(_return);
    }
    ifaces_[i]->ResetCatalog(_return);
    return;
  }

  void ResetTable( ::impala::TStatus& _return, const TResetTableReq& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ResetTable(_return, request);
    }
    ifaces_[i]->ResetTable(_return, request);
    return;
  }

  void GetRuntimeProfile(std::string& _return, const  ::beeswax::QueryHandle& query_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetRuntimeProfile(_return, query_id);
    }
    ifaces_[i]->GetRuntimeProfile(_return, query_id);
    return;
  }

  void CloseInsert(TInsertResult& _return, const  ::beeswax::QueryHandle& handle) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CloseInsert(_return, handle);
    }
    ifaces_[i]->CloseInsert(_return, handle);
    return;
  }

  void PingImpalaService(TPingImpalaServiceResp& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PingImpalaService(_return);
    }
    ifaces_[i]->PingImpalaService(_return);
    return;
  }

};

} // namespace

#endif

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef StateStoreService_TYPES_H
#define StateStoreService_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "Status_types.h"
#include "Types_types.h"


namespace impala {

struct StateStoreServiceVersion {
  enum type {
    V1 = 0
  };
};

extern const std::map<int, const char*> _StateStoreServiceVersion_VALUES_TO_NAMES;

typedef struct _TBackendDescriptor__isset {
  _TBackendDescriptor__isset() : debug_http_address(false) {}
  bool debug_http_address;
} _TBackendDescriptor__isset;

class TBackendDescriptor {
 public:

  static const char* ascii_fingerprint; // = "60AD13F4E27EBFD15F3C4A5627C15865";
  static const uint8_t binary_fingerprint[16]; // = {0x60,0xAD,0x13,0xF4,0xE2,0x7E,0xBF,0xD1,0x5F,0x3C,0x4A,0x56,0x27,0xC1,0x58,0x65};

  TBackendDescriptor() : ip_address() {
  }

  virtual ~TBackendDescriptor() throw() {}

   ::impala::TNetworkAddress address;
  std::string ip_address;
   ::impala::TNetworkAddress debug_http_address;

  _TBackendDescriptor__isset __isset;

  void __set_address(const  ::impala::TNetworkAddress& val) {
    address = val;
  }

  void __set_ip_address(const std::string& val) {
    ip_address = val;
  }

  void __set_debug_http_address(const  ::impala::TNetworkAddress& val) {
    debug_http_address = val;
    __isset.debug_http_address = true;
  }

  bool operator == (const TBackendDescriptor & rhs) const
  {
    if (!(address == rhs.address))
      return false;
    if (!(ip_address == rhs.ip_address))
      return false;
    if (__isset.debug_http_address != rhs.__isset.debug_http_address)
      return false;
    else if (__isset.debug_http_address && !(debug_http_address == rhs.debug_http_address))
      return false;
    return true;
  }
  bool operator != (const TBackendDescriptor &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TBackendDescriptor & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TBackendDescriptor &a, TBackendDescriptor &b);


class TTopicItem {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  TTopicItem() : key(), value() {
  }

  virtual ~TTopicItem() throw() {}

  std::string key;
  std::string value;

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_value(const std::string& val) {
    value = val;
  }

  bool operator == (const TTopicItem & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const TTopicItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TTopicItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TTopicItem &a, TTopicItem &b);


class TTopicUpdate {
 public:

  static const char* ascii_fingerprint; // = "63BEFF99DEA50F978623FCD4A34DFFEB";
  static const uint8_t binary_fingerprint[16]; // = {0x63,0xBE,0xFF,0x99,0xDE,0xA5,0x0F,0x97,0x86,0x23,0xFC,0xD4,0xA3,0x4D,0xFF,0xEB};

  TTopicUpdate() : topic_name() {
  }

  virtual ~TTopicUpdate() throw() {}

  std::string topic_name;
  std::vector<TTopicItem>  topic_updates;
  std::vector<std::string>  topic_deletions;

  void __set_topic_name(const std::string& val) {
    topic_name = val;
  }

  void __set_topic_updates(const std::vector<TTopicItem> & val) {
    topic_updates = val;
  }

  void __set_topic_deletions(const std::vector<std::string> & val) {
    topic_deletions = val;
  }

  bool operator == (const TTopicUpdate & rhs) const
  {
    if (!(topic_name == rhs.topic_name))
      return false;
    if (!(topic_updates == rhs.topic_updates))
      return false;
    if (!(topic_deletions == rhs.topic_deletions))
      return false;
    return true;
  }
  bool operator != (const TTopicUpdate &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TTopicUpdate & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TTopicUpdate &a, TTopicUpdate &b);


class TTopicDelta {
 public:

  static const char* ascii_fingerprint; // = "C2805DE04682BB50E371BDF62B2C1232";
  static const uint8_t binary_fingerprint[16]; // = {0xC2,0x80,0x5D,0xE0,0x46,0x82,0xBB,0x50,0xE3,0x71,0xBD,0xF6,0x2B,0x2C,0x12,0x32};

  TTopicDelta() : topic_name(), is_delta(0) {
  }

  virtual ~TTopicDelta() throw() {}

  std::string topic_name;
  std::vector<TTopicItem>  topic_entries;
  std::vector<std::string>  topic_deletions;
  bool is_delta;

  void __set_topic_name(const std::string& val) {
    topic_name = val;
  }

  void __set_topic_entries(const std::vector<TTopicItem> & val) {
    topic_entries = val;
  }

  void __set_topic_deletions(const std::vector<std::string> & val) {
    topic_deletions = val;
  }

  void __set_is_delta(const bool val) {
    is_delta = val;
  }

  bool operator == (const TTopicDelta & rhs) const
  {
    if (!(topic_name == rhs.topic_name))
      return false;
    if (!(topic_entries == rhs.topic_entries))
      return false;
    if (!(topic_deletions == rhs.topic_deletions))
      return false;
    if (!(is_delta == rhs.is_delta))
      return false;
    return true;
  }
  bool operator != (const TTopicDelta &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TTopicDelta & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TTopicDelta &a, TTopicDelta &b);


class TTopicRegistration {
 public:

  static const char* ascii_fingerprint; // = "7D61C9AA00102AB4D8F72A1DA58297DC";
  static const uint8_t binary_fingerprint[16]; // = {0x7D,0x61,0xC9,0xAA,0x00,0x10,0x2A,0xB4,0xD8,0xF7,0x2A,0x1D,0xA5,0x82,0x97,0xDC};

  TTopicRegistration() : topic_name(), is_transient(0) {
  }

  virtual ~TTopicRegistration() throw() {}

  std::string topic_name;
  bool is_transient;

  void __set_topic_name(const std::string& val) {
    topic_name = val;
  }

  void __set_is_transient(const bool val) {
    is_transient = val;
  }

  bool operator == (const TTopicRegistration & rhs) const
  {
    if (!(topic_name == rhs.topic_name))
      return false;
    if (!(is_transient == rhs.is_transient))
      return false;
    return true;
  }
  bool operator != (const TTopicRegistration &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TTopicRegistration & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TTopicRegistration &a, TTopicRegistration &b);


class TRegisterSubscriberRequest {
 public:

  static const char* ascii_fingerprint; // = "79FBAF663F4F9AC94F2386BD4840E86A";
  static const uint8_t binary_fingerprint[16]; // = {0x79,0xFB,0xAF,0x66,0x3F,0x4F,0x9A,0xC9,0x4F,0x23,0x86,0xBD,0x48,0x40,0xE8,0x6A};

  TRegisterSubscriberRequest() : protocol_version((StateStoreServiceVersion::type)0), subscriber_id() {
    protocol_version = (StateStoreServiceVersion::type)0;

  }

  virtual ~TRegisterSubscriberRequest() throw() {}

  StateStoreServiceVersion::type protocol_version;
  std::string subscriber_id;
   ::impala::TNetworkAddress subscriber_location;
  std::vector<TTopicRegistration>  topic_registrations;

  void __set_protocol_version(const StateStoreServiceVersion::type val) {
    protocol_version = val;
  }

  void __set_subscriber_id(const std::string& val) {
    subscriber_id = val;
  }

  void __set_subscriber_location(const  ::impala::TNetworkAddress& val) {
    subscriber_location = val;
  }

  void __set_topic_registrations(const std::vector<TTopicRegistration> & val) {
    topic_registrations = val;
  }

  bool operator == (const TRegisterSubscriberRequest & rhs) const
  {
    if (!(protocol_version == rhs.protocol_version))
      return false;
    if (!(subscriber_id == rhs.subscriber_id))
      return false;
    if (!(subscriber_location == rhs.subscriber_location))
      return false;
    if (!(topic_registrations == rhs.topic_registrations))
      return false;
    return true;
  }
  bool operator != (const TRegisterSubscriberRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRegisterSubscriberRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TRegisterSubscriberRequest &a, TRegisterSubscriberRequest &b);


class TRegisterSubscriberResponse {
 public:

  static const char* ascii_fingerprint; // = "5D172D269EB9D48C37F2702186BA51B0";
  static const uint8_t binary_fingerprint[16]; // = {0x5D,0x17,0x2D,0x26,0x9E,0xB9,0xD4,0x8C,0x37,0xF2,0x70,0x21,0x86,0xBA,0x51,0xB0};

  TRegisterSubscriberResponse() {
  }

  virtual ~TRegisterSubscriberResponse() throw() {}

   ::impala::TStatus status;

  void __set_status(const  ::impala::TStatus& val) {
    status = val;
  }

  bool operator == (const TRegisterSubscriberResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const TRegisterSubscriberResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRegisterSubscriberResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TRegisterSubscriberResponse &a, TRegisterSubscriberResponse &b);


class TUpdateStateRequest {
 public:

  static const char* ascii_fingerprint; // = "811E0A6DBF85758EE37F39E46F7E5CF6";
  static const uint8_t binary_fingerprint[16]; // = {0x81,0x1E,0x0A,0x6D,0xBF,0x85,0x75,0x8E,0xE3,0x7F,0x39,0xE4,0x6F,0x7E,0x5C,0xF6};

  TUpdateStateRequest() : protocol_version((StateStoreServiceVersion::type)0) {
    protocol_version = (StateStoreServiceVersion::type)0;

  }

  virtual ~TUpdateStateRequest() throw() {}

  StateStoreServiceVersion::type protocol_version;
  std::map<std::string, TTopicDelta>  topic_deltas;

  void __set_protocol_version(const StateStoreServiceVersion::type val) {
    protocol_version = val;
  }

  void __set_topic_deltas(const std::map<std::string, TTopicDelta> & val) {
    topic_deltas = val;
  }

  bool operator == (const TUpdateStateRequest & rhs) const
  {
    if (!(protocol_version == rhs.protocol_version))
      return false;
    if (!(topic_deltas == rhs.topic_deltas))
      return false;
    return true;
  }
  bool operator != (const TUpdateStateRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TUpdateStateRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TUpdateStateRequest &a, TUpdateStateRequest &b);


class TUpdateStateResponse {
 public:

  static const char* ascii_fingerprint; // = "29927C815DE049DEA54ECFF2B3284EF8";
  static const uint8_t binary_fingerprint[16]; // = {0x29,0x92,0x7C,0x81,0x5D,0xE0,0x49,0xDE,0xA5,0x4E,0xCF,0xF2,0xB3,0x28,0x4E,0xF8};

  TUpdateStateResponse() {
  }

  virtual ~TUpdateStateResponse() throw() {}

   ::impala::TStatus status;
  std::vector<TTopicUpdate>  topic_updates;

  void __set_status(const  ::impala::TStatus& val) {
    status = val;
  }

  void __set_topic_updates(const std::vector<TTopicUpdate> & val) {
    topic_updates = val;
  }

  bool operator == (const TUpdateStateResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(topic_updates == rhs.topic_updates))
      return false;
    return true;
  }
  bool operator != (const TUpdateStateResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TUpdateStateResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TUpdateStateResponse &a, TUpdateStateResponse &b);

} // namespace

#endif

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Opcodes_TYPES_H
#define Opcodes_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace impala {

struct TExprOpcode {
  enum type {
    INVALID_OPCODE = 0,
    ADD_DOUBLE_DOUBLE = 1,
    ADD_LONG_LONG = 2,
    BITAND_CHAR_CHAR = 3,
    BITAND_INT_INT = 4,
    BITAND_LONG_LONG = 5,
    BITAND_SHORT_SHORT = 6,
    BITNOT_CHAR = 7,
    BITNOT_INT = 8,
    BITNOT_LONG = 9,
    BITNOT_SHORT = 10,
    BITOR_CHAR_CHAR = 11,
    BITOR_INT_INT = 12,
    BITOR_LONG_LONG = 13,
    BITOR_SHORT_SHORT = 14,
    BITXOR_CHAR_CHAR = 15,
    BITXOR_INT_INT = 16,
    BITXOR_LONG_LONG = 17,
    BITXOR_SHORT_SHORT = 18,
    CASE_BOOL = 19,
    CASE_CHAR = 20,
    CASE_DOUBLE = 21,
    CASE_FLOAT = 22,
    CASE_INT = 23,
    CASE_LONG = 24,
    CASE_SHORT = 25,
    CASE_STRINGVALUE = 26,
    CASE_TIMESTAMPVALUE = 27,
    CAST_BOOL_BOOL = 28,
    CAST_BOOL_CHAR = 29,
    CAST_BOOL_DOUBLE = 30,
    CAST_BOOL_FLOAT = 31,
    CAST_BOOL_INT = 32,
    CAST_BOOL_LONG = 33,
    CAST_BOOL_SHORT = 34,
    CAST_BOOL_STRINGVALUE = 35,
    CAST_BOOL_TIMESTAMPVALUE = 36,
    CAST_CHAR_BOOL = 37,
    CAST_CHAR_CHAR = 38,
    CAST_CHAR_DOUBLE = 39,
    CAST_CHAR_FLOAT = 40,
    CAST_CHAR_INT = 41,
    CAST_CHAR_LONG = 42,
    CAST_CHAR_SHORT = 43,
    CAST_CHAR_STRINGVALUE = 44,
    CAST_CHAR_TIMESTAMPVALUE = 45,
    CAST_DOUBLE_BOOL = 46,
    CAST_DOUBLE_CHAR = 47,
    CAST_DOUBLE_DOUBLE = 48,
    CAST_DOUBLE_FLOAT = 49,
    CAST_DOUBLE_INT = 50,
    CAST_DOUBLE_LONG = 51,
    CAST_DOUBLE_SHORT = 52,
    CAST_DOUBLE_STRINGVALUE = 53,
    CAST_DOUBLE_TIMESTAMPVALUE = 54,
    CAST_FLOAT_BOOL = 55,
    CAST_FLOAT_CHAR = 56,
    CAST_FLOAT_DOUBLE = 57,
    CAST_FLOAT_FLOAT = 58,
    CAST_FLOAT_INT = 59,
    CAST_FLOAT_LONG = 60,
    CAST_FLOAT_SHORT = 61,
    CAST_FLOAT_STRINGVALUE = 62,
    CAST_FLOAT_TIMESTAMPVALUE = 63,
    CAST_INT_BOOL = 64,
    CAST_INT_CHAR = 65,
    CAST_INT_DOUBLE = 66,
    CAST_INT_FLOAT = 67,
    CAST_INT_INT = 68,
    CAST_INT_LONG = 69,
    CAST_INT_SHORT = 70,
    CAST_INT_STRINGVALUE = 71,
    CAST_INT_TIMESTAMPVALUE = 72,
    CAST_LONG_BOOL = 73,
    CAST_LONG_CHAR = 74,
    CAST_LONG_DOUBLE = 75,
    CAST_LONG_FLOAT = 76,
    CAST_LONG_INT = 77,
    CAST_LONG_LONG = 78,
    CAST_LONG_SHORT = 79,
    CAST_LONG_STRINGVALUE = 80,
    CAST_LONG_TIMESTAMPVALUE = 81,
    CAST_SHORT_BOOL = 82,
    CAST_SHORT_CHAR = 83,
    CAST_SHORT_DOUBLE = 84,
    CAST_SHORT_FLOAT = 85,
    CAST_SHORT_INT = 86,
    CAST_SHORT_LONG = 87,
    CAST_SHORT_SHORT = 88,
    CAST_SHORT_STRINGVALUE = 89,
    CAST_SHORT_TIMESTAMPVALUE = 90,
    CAST_STRINGVALUE_CHAR = 91,
    CAST_STRINGVALUE_DOUBLE = 92,
    CAST_STRINGVALUE_FLOAT = 93,
    CAST_STRINGVALUE_INT = 94,
    CAST_STRINGVALUE_LONG = 95,
    CAST_STRINGVALUE_SHORT = 96,
    CAST_STRINGVALUE_TIMESTAMPVALUE = 97,
    CAST_TIMESTAMPVALUE_BOOL = 98,
    CAST_TIMESTAMPVALUE_CHAR = 99,
    CAST_TIMESTAMPVALUE_DOUBLE = 100,
    CAST_TIMESTAMPVALUE_FLOAT = 101,
    CAST_TIMESTAMPVALUE_INT = 102,
    CAST_TIMESTAMPVALUE_LONG = 103,
    CAST_TIMESTAMPVALUE_SHORT = 104,
    CAST_TIMESTAMPVALUE_STRINGVALUE = 105,
    COMPOUND_AND = 106,
    COMPOUND_NOT = 107,
    COMPOUND_OR = 108,
    CONDITIONAL_COALESCE_BOOL_VARARGS = 109,
    CONDITIONAL_COALESCE_DOUBLE_VARARGS = 110,
    CONDITIONAL_COALESCE_LONG_VARARGS = 111,
    CONDITIONAL_COALESCE_STRINGVALUE_VARARGS = 112,
    CONDITIONAL_COALESCE_TIMESTAMPVALUE_VARARGS = 113,
    CONDITIONAL_IF_BOOL_BOOL_BOOL = 114,
    CONDITIONAL_IF_BOOL_CHAR_CHAR = 115,
    CONDITIONAL_IF_BOOL_DOUBLE_DOUBLE = 116,
    CONDITIONAL_IF_BOOL_FLOAT_FLOAT = 117,
    CONDITIONAL_IF_BOOL_INT_INT = 118,
    CONDITIONAL_IF_BOOL_LONG_LONG = 119,
    CONDITIONAL_IF_BOOL_SHORT_SHORT = 120,
    CONDITIONAL_IF_BOOL_STRINGVALUE_STRINGVALUE = 121,
    CONDITIONAL_IF_BOOL_TIMESTAMPVALUE_TIMESTAMPVALUE = 122,
    CONDITIONAL_ISNULL_BOOL_BOOL = 123,
    CONDITIONAL_ISNULL_DOUBLE_DOUBLE = 124,
    CONDITIONAL_ISNULL_INT_INT = 125,
    CONDITIONAL_ISNULL_LONG_LONG = 126,
    CONDITIONAL_ISNULL_STRINGVALUE_STRINGVALUE = 127,
    CONDITIONAL_ISNULL_TIMESTAMPVALUE_TIMESTAMPVALUE = 128,
    CONSTANT_REGEX = 129,
    CONSTANT_SUBSTRING = 130,
    DIVIDE = 131,
    EQ_BOOL_BOOL = 132,
    EQ_CHAR_CHAR = 133,
    EQ_DOUBLE_DOUBLE = 134,
    EQ_FLOAT_FLOAT = 135,
    EQ_INT_INT = 136,
    EQ_LONG_LONG = 137,
    EQ_SHORT_SHORT = 138,
    EQ_STRINGVALUE_STRINGVALUE = 139,
    EQ_TIMESTAMPVALUE_TIMESTAMPVALUE = 140,
    FROM_UNIXTIME_INT = 141,
    FROM_UNIXTIME_INT_STRINGVALUE = 142,
    FROM_UTC_TIMESTAMP = 143,
    GE_BOOL_BOOL = 144,
    GE_CHAR_CHAR = 145,
    GE_DOUBLE_DOUBLE = 146,
    GE_FLOAT_FLOAT = 147,
    GE_INT_INT = 148,
    GE_LONG_LONG = 149,
    GE_SHORT_SHORT = 150,
    GE_STRINGVALUE_STRINGVALUE = 151,
    GE_TIMESTAMPVALUE_TIMESTAMPVALUE = 152,
    GT_BOOL_BOOL = 153,
    GT_CHAR_CHAR = 154,
    GT_DOUBLE_DOUBLE = 155,
    GT_FLOAT_FLOAT = 156,
    GT_INT_INT = 157,
    GT_LONG_LONG = 158,
    GT_SHORT_SHORT = 159,
    GT_STRINGVALUE_STRINGVALUE = 160,
    GT_TIMESTAMPVALUE_TIMESTAMPVALUE = 161,
    INT_DIVIDE_CHAR_CHAR = 162,
    INT_DIVIDE_INT_INT = 163,
    INT_DIVIDE_LONG_LONG = 164,
    INT_DIVIDE_SHORT_SHORT = 165,
    LE_BOOL_BOOL = 166,
    LE_CHAR_CHAR = 167,
    LE_DOUBLE_DOUBLE = 168,
    LE_FLOAT_FLOAT = 169,
    LE_INT_INT = 170,
    LE_LONG_LONG = 171,
    LE_SHORT_SHORT = 172,
    LE_STRINGVALUE_STRINGVALUE = 173,
    LE_TIMESTAMPVALUE_TIMESTAMPVALUE = 174,
    LIKE = 175,
    LT_BOOL_BOOL = 176,
    LT_CHAR_CHAR = 177,
    LT_DOUBLE_DOUBLE = 178,
    LT_FLOAT_FLOAT = 179,
    LT_INT_INT = 180,
    LT_LONG_LONG = 181,
    LT_SHORT_SHORT = 182,
    LT_STRINGVALUE_STRINGVALUE = 183,
    LT_TIMESTAMPVALUE_TIMESTAMPVALUE = 184,
    MATH_ABS = 185,
    MATH_ACOS = 186,
    MATH_ASIN = 187,
    MATH_ATAN = 188,
    MATH_BIN = 189,
    MATH_CEIL = 190,
    MATH_CONV_LONG_CHAR_CHAR = 191,
    MATH_CONV_STRINGVALUE_CHAR_CHAR = 192,
    MATH_COS = 193,
    MATH_DEGREES = 194,
    MATH_E = 195,
    MATH_EXP = 196,
    MATH_FLOOR = 197,
    MATH_HEX_LONG = 198,
    MATH_HEX_STRINGVALUE = 199,
    MATH_LN = 200,
    MATH_LOG = 201,
    MATH_LOG10 = 202,
    MATH_LOG2 = 203,
    MATH_NEGATIVE_DOUBLE = 204,
    MATH_NEGATIVE_LONG = 205,
    MATH_PI = 206,
    MATH_PMOD_DOUBLE_DOUBLE = 207,
    MATH_PMOD_LONG_LONG = 208,
    MATH_POSITIVE_DOUBLE = 209,
    MATH_POSITIVE_LONG = 210,
    MATH_POW = 211,
    MATH_QUOTIENT_DOUBLE_DOUBLE = 212,
    MATH_QUOTIENT_LONG_LONG = 213,
    MATH_RADIANS = 214,
    MATH_RAND = 215,
    MATH_RAND_INT = 216,
    MATH_ROUND_DOUBLE = 217,
    MATH_ROUND_DOUBLE_INT = 218,
    MATH_SIGN = 219,
    MATH_SIN = 220,
    MATH_SQRT = 221,
    MATH_TAN = 222,
    MATH_UNHEX = 223,
    MOD_CHAR_CHAR = 224,
    MOD_INT_INT = 225,
    MOD_LONG_LONG = 226,
    MOD_SHORT_SHORT = 227,
    MULTIPLY_DOUBLE_DOUBLE = 228,
    MULTIPLY_LONG_LONG = 229,
    NE_BOOL_BOOL = 230,
    NE_CHAR_CHAR = 231,
    NE_DOUBLE_DOUBLE = 232,
    NE_FLOAT_FLOAT = 233,
    NE_INT_INT = 234,
    NE_LONG_LONG = 235,
    NE_SHORT_SHORT = 236,
    NE_STRINGVALUE_STRINGVALUE = 237,
    NE_TIMESTAMPVALUE_TIMESTAMPVALUE = 238,
    REGEX = 239,
    STRING_ASCII = 240,
    STRING_CONCAT = 241,
    STRING_CONCAT_WS = 242,
    STRING_FIND_IN_SET = 243,
    STRING_INSTR = 244,
    STRING_LEFT_STRINGVALUE_INT = 245,
    STRING_LEFT_STRINGVALUE_LONG = 246,
    STRING_LENGTH = 247,
    STRING_LOCATE_STRINGVALUE_STRINGVALUE = 248,
    STRING_LOCATE_STRINGVALUE_STRINGVALUE_INT = 249,
    STRING_LOCATE_STRINGVALUE_STRINGVALUE_LONG = 250,
    STRING_LOWER = 251,
    STRING_LPAD_STRINGVALUE_INT_STRINGVALUE = 252,
    STRING_LPAD_STRINGVALUE_LONG_STRINGVALUE = 253,
    STRING_LTRIM = 254,
    STRING_PARSE_URL_STRINGVALUE_STRINGVALUE = 255,
    STRING_PARSE_URL_STRINGVALUE_STRINGVALUE_STRINGVALUE = 256,
    STRING_REGEXP_EXTRACT_STRINGVALUE_STRINGVALUE_INT = 257,
    STRING_REGEXP_EXTRACT_STRINGVALUE_STRINGVALUE_LONG = 258,
    STRING_REGEXP_REPLACE = 259,
    STRING_REPEAT_STRINGVALUE_INT = 260,
    STRING_REPEAT_STRINGVALUE_LONG = 261,
    STRING_REVERSE = 262,
    STRING_RIGHT_STRINGVALUE_INT = 263,
    STRING_RIGHT_STRINGVALUE_LONG = 264,
    STRING_RPAD_STRINGVALUE_INT_STRINGVALUE = 265,
    STRING_RPAD_STRINGVALUE_LONG_STRINGVALUE = 266,
    STRING_RTRIM = 267,
    STRING_SPACE_INT = 268,
    STRING_SPACE_LONG = 269,
    STRING_SUBSTRING_STRINGVALUE_INT = 270,
    STRING_SUBSTRING_STRINGVALUE_INT_INT = 271,
    STRING_SUBSTRING_STRINGVALUE_LONG = 272,
    STRING_SUBSTRING_STRINGVALUE_LONG_LONG = 273,
    STRING_TRIM = 274,
    STRING_UPPER = 275,
    SUBTRACT_DOUBLE_DOUBLE = 276,
    SUBTRACT_LONG_LONG = 277,
    TIMESTAMP_DAYOFMONTH = 278,
    TIMESTAMP_DAYOFYEAR = 279,
    TIMESTAMP_DAYS_ADD_TIMESTAMPVALUE_INT = 280,
    TIMESTAMP_DAYS_ADD_TIMESTAMPVALUE_LONG = 281,
    TIMESTAMP_DAYS_SUB_TIMESTAMPVALUE_INT = 282,
    TIMESTAMP_DAYS_SUB_TIMESTAMPVALUE_LONG = 283,
    TIMESTAMP_DIFF = 284,
    TIMESTAMP_HOUR = 285,
    TIMESTAMP_HOURS_ADD_TIMESTAMPVALUE_INT = 286,
    TIMESTAMP_HOURS_ADD_TIMESTAMPVALUE_LONG = 287,
    TIMESTAMP_HOURS_SUB_TIMESTAMPVALUE_INT = 288,
    TIMESTAMP_HOURS_SUB_TIMESTAMPVALUE_LONG = 289,
    TIMESTAMP_MICROSECONDS_ADD_TIMESTAMPVALUE_INT = 290,
    TIMESTAMP_MICROSECONDS_ADD_TIMESTAMPVALUE_LONG = 291,
    TIMESTAMP_MICROSECONDS_SUB_TIMESTAMPVALUE_INT = 292,
    TIMESTAMP_MICROSECONDS_SUB_TIMESTAMPVALUE_LONG = 293,
    TIMESTAMP_MILLISECONDS_ADD_TIMESTAMPVALUE_INT = 294,
    TIMESTAMP_MILLISECONDS_ADD_TIMESTAMPVALUE_LONG = 295,
    TIMESTAMP_MILLISECONDS_SUB_TIMESTAMPVALUE_INT = 296,
    TIMESTAMP_MILLISECONDS_SUB_TIMESTAMPVALUE_LONG = 297,
    TIMESTAMP_MINUTE = 298,
    TIMESTAMP_MINUTES_ADD_TIMESTAMPVALUE_INT = 299,
    TIMESTAMP_MINUTES_ADD_TIMESTAMPVALUE_LONG = 300,
    TIMESTAMP_MINUTES_SUB_TIMESTAMPVALUE_INT = 301,
    TIMESTAMP_MINUTES_SUB_TIMESTAMPVALUE_LONG = 302,
    TIMESTAMP_MONTH = 303,
    TIMESTAMP_MONTHS_ADD_TIMESTAMPVALUE_INT = 304,
    TIMESTAMP_MONTHS_ADD_TIMESTAMPVALUE_LONG = 305,
    TIMESTAMP_MONTHS_SUB_TIMESTAMPVALUE_INT = 306,
    TIMESTAMP_MONTHS_SUB_TIMESTAMPVALUE_LONG = 307,
    TIMESTAMP_NANOSECONDS_ADD_TIMESTAMPVALUE_INT = 308,
    TIMESTAMP_NANOSECONDS_ADD_TIMESTAMPVALUE_LONG = 309,
    TIMESTAMP_NANOSECONDS_SUB_TIMESTAMPVALUE_INT = 310,
    TIMESTAMP_NANOSECONDS_SUB_TIMESTAMPVALUE_LONG = 311,
    TIMESTAMP_NOW = 312,
    TIMESTAMP_SECOND = 313,
    TIMESTAMP_SECONDS_ADD_TIMESTAMPVALUE_INT = 314,
    TIMESTAMP_SECONDS_ADD_TIMESTAMPVALUE_LONG = 315,
    TIMESTAMP_SECONDS_SUB_TIMESTAMPVALUE_INT = 316,
    TIMESTAMP_SECONDS_SUB_TIMESTAMPVALUE_LONG = 317,
    TIMESTAMP_TO_DATE = 318,
    TIMESTAMP_WEEKOFYEAR = 319,
    TIMESTAMP_WEEKS_ADD_TIMESTAMPVALUE_INT = 320,
    TIMESTAMP_WEEKS_ADD_TIMESTAMPVALUE_LONG = 321,
    TIMESTAMP_WEEKS_SUB_TIMESTAMPVALUE_INT = 322,
    TIMESTAMP_WEEKS_SUB_TIMESTAMPVALUE_LONG = 323,
    TIMESTAMP_YEAR = 324,
    TIMESTAMP_YEARS_ADD_TIMESTAMPVALUE_INT = 325,
    TIMESTAMP_YEARS_ADD_TIMESTAMPVALUE_LONG = 326,
    TIMESTAMP_YEARS_SUB_TIMESTAMPVALUE_INT = 327,
    TIMESTAMP_YEARS_SUB_TIMESTAMPVALUE_LONG = 328,
    TO_UTC_TIMESTAMP = 329,
    UNIX_TIMESTAMP = 330,
    UNIX_TIMESTAMP_STRINGVALUE_STRINGVALUE = 331,
    UNIX_TIMESTAMP_TIMESTAMPVALUE = 332,
    UTILITY_SLEEP = 333,
    UTILITY_VERSION = 334,
    LAST_OPCODE = 335
  };
};

extern const std::map<int, const char*> _TExprOpcode_VALUES_TO_NAMES;

} // namespace

#endif

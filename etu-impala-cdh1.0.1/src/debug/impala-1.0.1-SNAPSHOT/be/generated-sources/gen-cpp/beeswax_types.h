/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef beeswax_TYPES_H
#define beeswax_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "hive_metastore_types.h"


namespace beeswax {

struct QueryState {
  enum type {
    CREATED = 0,
    INITIALIZED = 1,
    COMPILED = 2,
    RUNNING = 3,
    FINISHED = 4,
    EXCEPTION = 5
  };
};

extern const std::map<int, const char*> _QueryState_VALUES_TO_NAMES;

typedef std::string LogContextId;

typedef struct _Query__isset {
  _Query__isset() : query(false), configuration(false), hadoop_user(false) {}
  bool query;
  bool configuration;
  bool hadoop_user;
} _Query__isset;

class Query {
 public:

  static const char* ascii_fingerprint; // = "D636F061EBAFBA58198444BF34739247";
  static const uint8_t binary_fingerprint[16]; // = {0xD6,0x36,0xF0,0x61,0xEB,0xAF,0xBA,0x58,0x19,0x84,0x44,0xBF,0x34,0x73,0x92,0x47};

  Query() : query(), hadoop_user() {
  }

  virtual ~Query() throw() {}

  std::string query;
  std::vector<std::string>  configuration;
  std::string hadoop_user;

  _Query__isset __isset;

  void __set_query(const std::string& val) {
    query = val;
    __isset.query = true;
  }

  void __set_configuration(const std::vector<std::string> & val) {
    configuration = val;
    __isset.configuration = true;
  }

  void __set_hadoop_user(const std::string& val) {
    hadoop_user = val;
    __isset.hadoop_user = true;
  }

  bool operator == (const Query & rhs) const
  {
    if (!(query == rhs.query))
      return false;
    if (!(configuration == rhs.configuration))
      return false;
    if (!(hadoop_user == rhs.hadoop_user))
      return false;
    return true;
  }
  bool operator != (const Query &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Query & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Query &a, Query &b);

typedef struct _QueryHandle__isset {
  _QueryHandle__isset() : id(false), log_context(false) {}
  bool id;
  bool log_context;
} _QueryHandle__isset;

class QueryHandle {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  QueryHandle() : id(), log_context() {
  }

  virtual ~QueryHandle() throw() {}

  std::string id;
  LogContextId log_context;

  _QueryHandle__isset __isset;

  void __set_id(const std::string& val) {
    id = val;
    __isset.id = true;
  }

  void __set_log_context(const LogContextId& val) {
    log_context = val;
    __isset.log_context = true;
  }

  bool operator == (const QueryHandle & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(log_context == rhs.log_context))
      return false;
    return true;
  }
  bool operator != (const QueryHandle &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryHandle & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(QueryHandle &a, QueryHandle &b);

typedef struct _QueryExplanation__isset {
  _QueryExplanation__isset() : textual(false) {}
  bool textual;
} _QueryExplanation__isset;

class QueryExplanation {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  QueryExplanation() : textual() {
  }

  virtual ~QueryExplanation() throw() {}

  std::string textual;

  _QueryExplanation__isset __isset;

  void __set_textual(const std::string& val) {
    textual = val;
    __isset.textual = true;
  }

  bool operator == (const QueryExplanation & rhs) const
  {
    if (!(textual == rhs.textual))
      return false;
    return true;
  }
  bool operator != (const QueryExplanation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryExplanation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(QueryExplanation &a, QueryExplanation &b);

typedef struct _Results__isset {
  _Results__isset() : ready(false), columns(false), data(false), start_row(false), has_more(false) {}
  bool ready;
  bool columns;
  bool data;
  bool start_row;
  bool has_more;
} _Results__isset;

class Results {
 public:

  static const char* ascii_fingerprint; // = "9B96B446ECB8DA24A30A0374DD5EB7FB";
  static const uint8_t binary_fingerprint[16]; // = {0x9B,0x96,0xB4,0x46,0xEC,0xB8,0xDA,0x24,0xA3,0x0A,0x03,0x74,0xDD,0x5E,0xB7,0xFB};

  Results() : ready(0), start_row(0), has_more(0) {
  }

  virtual ~Results() throw() {}

  bool ready;
  std::vector<std::string>  columns;
  std::vector<std::string>  data;
  int64_t start_row;
  bool has_more;

  _Results__isset __isset;

  void __set_ready(const bool val) {
    ready = val;
    __isset.ready = true;
  }

  void __set_columns(const std::vector<std::string> & val) {
    columns = val;
    __isset.columns = true;
  }

  void __set_data(const std::vector<std::string> & val) {
    data = val;
    __isset.data = true;
  }

  void __set_start_row(const int64_t val) {
    start_row = val;
    __isset.start_row = true;
  }

  void __set_has_more(const bool val) {
    has_more = val;
    __isset.has_more = true;
  }

  bool operator == (const Results & rhs) const
  {
    if (!(ready == rhs.ready))
      return false;
    if (!(columns == rhs.columns))
      return false;
    if (!(data == rhs.data))
      return false;
    if (!(start_row == rhs.start_row))
      return false;
    if (!(has_more == rhs.has_more))
      return false;
    return true;
  }
  bool operator != (const Results &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Results & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Results &a, Results &b);

typedef struct _ResultsMetadata__isset {
  _ResultsMetadata__isset() : schema(false), table_dir(false), in_tablename(false), delim(false) {}
  bool schema;
  bool table_dir;
  bool in_tablename;
  bool delim;
} _ResultsMetadata__isset;

class ResultsMetadata {
 public:

  static const char* ascii_fingerprint; // = "15FCD927118EA04CE10749B18FAE79EE";
  static const uint8_t binary_fingerprint[16]; // = {0x15,0xFC,0xD9,0x27,0x11,0x8E,0xA0,0x4C,0xE1,0x07,0x49,0xB1,0x8F,0xAE,0x79,0xEE};

  ResultsMetadata() : table_dir(), in_tablename(), delim() {
  }

  virtual ~ResultsMetadata() throw() {}

   ::Apache::Hadoop::Hive::Schema schema;
  std::string table_dir;
  std::string in_tablename;
  std::string delim;

  _ResultsMetadata__isset __isset;

  void __set_schema(const  ::Apache::Hadoop::Hive::Schema& val) {
    schema = val;
    __isset.schema = true;
  }

  void __set_table_dir(const std::string& val) {
    table_dir = val;
    __isset.table_dir = true;
  }

  void __set_in_tablename(const std::string& val) {
    in_tablename = val;
    __isset.in_tablename = true;
  }

  void __set_delim(const std::string& val) {
    delim = val;
    __isset.delim = true;
  }

  bool operator == (const ResultsMetadata & rhs) const
  {
    if (!(schema == rhs.schema))
      return false;
    if (!(table_dir == rhs.table_dir))
      return false;
    if (!(in_tablename == rhs.in_tablename))
      return false;
    if (!(delim == rhs.delim))
      return false;
    return true;
  }
  bool operator != (const ResultsMetadata &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ResultsMetadata & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ResultsMetadata &a, ResultsMetadata &b);

typedef struct _BeeswaxException__isset {
  _BeeswaxException__isset() : message(false), log_context(false), handle(false), errorCode(true), SQLState(true) {}
  bool message;
  bool log_context;
  bool handle;
  bool errorCode;
  bool SQLState;
} _BeeswaxException__isset;

class BeeswaxException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "C16AEDF7772C74A89DA4AF2FFEC6C6FB";
  static const uint8_t binary_fingerprint[16]; // = {0xC1,0x6A,0xED,0xF7,0x77,0x2C,0x74,0xA8,0x9D,0xA4,0xAF,0x2F,0xFE,0xC6,0xC6,0xFB};

  BeeswaxException() : message(), log_context(), errorCode(0), SQLState("     ") {
  }

  virtual ~BeeswaxException() throw() {}

  std::string message;
  LogContextId log_context;
  QueryHandle handle;
  int32_t errorCode;
  std::string SQLState;

  _BeeswaxException__isset __isset;

  void __set_message(const std::string& val) {
    message = val;
    __isset.message = true;
  }

  void __set_log_context(const LogContextId& val) {
    log_context = val;
    __isset.log_context = true;
  }

  void __set_handle(const QueryHandle& val) {
    handle = val;
    __isset.handle = true;
  }

  void __set_errorCode(const int32_t val) {
    errorCode = val;
    __isset.errorCode = true;
  }

  void __set_SQLState(const std::string& val) {
    SQLState = val;
    __isset.SQLState = true;
  }

  bool operator == (const BeeswaxException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    if (!(log_context == rhs.log_context))
      return false;
    if (!(handle == rhs.handle))
      return false;
    if (__isset.errorCode != rhs.__isset.errorCode)
      return false;
    else if (__isset.errorCode && !(errorCode == rhs.errorCode))
      return false;
    if (__isset.SQLState != rhs.__isset.SQLState)
      return false;
    else if (__isset.SQLState && !(SQLState == rhs.SQLState))
      return false;
    return true;
  }
  bool operator != (const BeeswaxException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BeeswaxException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(BeeswaxException &a, BeeswaxException &b);


class QueryNotFoundException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  QueryNotFoundException() {
  }

  virtual ~QueryNotFoundException() throw() {}


  bool operator == (const QueryNotFoundException & /* rhs */) const
  {
    return true;
  }
  bool operator != (const QueryNotFoundException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryNotFoundException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(QueryNotFoundException &a, QueryNotFoundException &b);

typedef struct _ConfigVariable__isset {
  _ConfigVariable__isset() : key(false), value(false), description(false) {}
  bool key;
  bool value;
  bool description;
} _ConfigVariable__isset;

class ConfigVariable {
 public:

  static const char* ascii_fingerprint; // = "AB879940BD15B6B25691265F7384B271";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

  ConfigVariable() : key(), value(), description() {
  }

  virtual ~ConfigVariable() throw() {}

  std::string key;
  std::string value;
  std::string description;

  _ConfigVariable__isset __isset;

  void __set_key(const std::string& val) {
    key = val;
    __isset.key = true;
  }

  void __set_value(const std::string& val) {
    value = val;
    __isset.value = true;
  }

  void __set_description(const std::string& val) {
    description = val;
    __isset.description = true;
  }

  bool operator == (const ConfigVariable & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    if (!(description == rhs.description))
      return false;
    return true;
  }
  bool operator != (const ConfigVariable &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigVariable & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ConfigVariable &a, ConfigVariable &b);

} // namespace

#endif

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Partitions_TYPES_H
#define Partitions_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "Exprs_types.h"


namespace impala {

struct TPartitionType {
  enum type {
    UNPARTITIONED = 0,
    RANDOM = 1,
    HASH_PARTITIONED = 2,
    RANGE_PARTITIONED = 3
  };
};

extern const std::map<int, const char*> _TPartitionType_VALUES_TO_NAMES;

typedef struct _TDataPartition__isset {
  _TDataPartition__isset() : partition_exprs(false) {}
  bool partition_exprs;
} _TDataPartition__isset;

class TDataPartition {
 public:

  static const char* ascii_fingerprint; // = "5642DCAB513C52DF94428360505F8E39";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0x42,0xDC,0xAB,0x51,0x3C,0x52,0xDF,0x94,0x42,0x83,0x60,0x50,0x5F,0x8E,0x39};

  TDataPartition() : type((TPartitionType::type)0) {
  }

  virtual ~TDataPartition() throw() {}

  TPartitionType::type type;
  std::vector< ::impala::TExpr>  partition_exprs;

  _TDataPartition__isset __isset;

  void __set_type(const TPartitionType::type val) {
    type = val;
  }

  void __set_partition_exprs(const std::vector< ::impala::TExpr> & val) {
    partition_exprs = val;
    __isset.partition_exprs = true;
  }

  bool operator == (const TDataPartition & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (__isset.partition_exprs != rhs.__isset.partition_exprs)
      return false;
    else if (__isset.partition_exprs && !(partition_exprs == rhs.partition_exprs))
      return false;
    return true;
  }
  bool operator != (const TDataPartition &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDataPartition & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TDataPartition &a, TDataPartition &b);

} // namespace

#endif

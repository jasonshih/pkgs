/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef StateStoreSubscriber_H
#define StateStoreSubscriber_H

#include <thrift/TDispatchProcessor.h>
#include "StateStoreService_types.h"

namespace impala {

class StateStoreSubscriberIf {
 public:
  virtual ~StateStoreSubscriberIf() {}
  virtual void UpdateState(TUpdateStateResponse& _return, const TUpdateStateRequest& params) = 0;
};

class StateStoreSubscriberIfFactory {
 public:
  typedef StateStoreSubscriberIf Handler;

  virtual ~StateStoreSubscriberIfFactory() {}

  virtual StateStoreSubscriberIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(StateStoreSubscriberIf* /* handler */) = 0;
};

class StateStoreSubscriberIfSingletonFactory : virtual public StateStoreSubscriberIfFactory {
 public:
  StateStoreSubscriberIfSingletonFactory(const boost::shared_ptr<StateStoreSubscriberIf>& iface) : iface_(iface) {}
  virtual ~StateStoreSubscriberIfSingletonFactory() {}

  virtual StateStoreSubscriberIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(StateStoreSubscriberIf* /* handler */) {}

 protected:
  boost::shared_ptr<StateStoreSubscriberIf> iface_;
};

class StateStoreSubscriberNull : virtual public StateStoreSubscriberIf {
 public:
  virtual ~StateStoreSubscriberNull() {}
  void UpdateState(TUpdateStateResponse& /* _return */, const TUpdateStateRequest& /* params */) {
    return;
  }
};

typedef struct _StateStoreSubscriber_UpdateState_args__isset {
  _StateStoreSubscriber_UpdateState_args__isset() : params(false) {}
  bool params;
} _StateStoreSubscriber_UpdateState_args__isset;

class StateStoreSubscriber_UpdateState_args {
 public:

  StateStoreSubscriber_UpdateState_args() {
  }

  virtual ~StateStoreSubscriber_UpdateState_args() throw() {}

  TUpdateStateRequest params;

  _StateStoreSubscriber_UpdateState_args__isset __isset;

  void __set_params(const TUpdateStateRequest& val) {
    params = val;
    __isset.params = true;
  }

  bool operator == (const StateStoreSubscriber_UpdateState_args & rhs) const
  {
    if (!(params == rhs.params))
      return false;
    return true;
  }
  bool operator != (const StateStoreSubscriber_UpdateState_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StateStoreSubscriber_UpdateState_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StateStoreSubscriber_UpdateState_pargs {
 public:


  virtual ~StateStoreSubscriber_UpdateState_pargs() throw() {}

  const TUpdateStateRequest* params;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StateStoreSubscriber_UpdateState_result__isset {
  _StateStoreSubscriber_UpdateState_result__isset() : success(false) {}
  bool success;
} _StateStoreSubscriber_UpdateState_result__isset;

class StateStoreSubscriber_UpdateState_result {
 public:

  StateStoreSubscriber_UpdateState_result() {
  }

  virtual ~StateStoreSubscriber_UpdateState_result() throw() {}

  TUpdateStateResponse success;

  _StateStoreSubscriber_UpdateState_result__isset __isset;

  void __set_success(const TUpdateStateResponse& val) {
    success = val;
    __isset.success = true;
  }

  bool operator == (const StateStoreSubscriber_UpdateState_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const StateStoreSubscriber_UpdateState_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StateStoreSubscriber_UpdateState_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StateStoreSubscriber_UpdateState_presult__isset {
  _StateStoreSubscriber_UpdateState_presult__isset() : success(false) {}
  bool success;
} _StateStoreSubscriber_UpdateState_presult__isset;

class StateStoreSubscriber_UpdateState_presult {
 public:


  virtual ~StateStoreSubscriber_UpdateState_presult() throw() {}

  TUpdateStateResponse* success;

  _StateStoreSubscriber_UpdateState_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class StateStoreSubscriberClient : virtual public StateStoreSubscriberIf {
 public:
  StateStoreSubscriberClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  StateStoreSubscriberClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void UpdateState(TUpdateStateResponse& _return, const TUpdateStateRequest& params);
  void send_UpdateState(const TUpdateStateRequest& params);
  void recv_UpdateState(TUpdateStateResponse& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class StateStoreSubscriberProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<StateStoreSubscriberIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (StateStoreSubscriberProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_UpdateState(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  StateStoreSubscriberProcessor(boost::shared_ptr<StateStoreSubscriberIf> iface) :
    iface_(iface) {
    processMap_["UpdateState"] = &StateStoreSubscriberProcessor::process_UpdateState;
  }

  virtual ~StateStoreSubscriberProcessor() {}
};

class StateStoreSubscriberProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  StateStoreSubscriberProcessorFactory(const ::boost::shared_ptr< StateStoreSubscriberIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< StateStoreSubscriberIfFactory > handlerFactory_;
};

class StateStoreSubscriberMultiface : virtual public StateStoreSubscriberIf {
 public:
  StateStoreSubscriberMultiface(std::vector<boost::shared_ptr<StateStoreSubscriberIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~StateStoreSubscriberMultiface() {}
 protected:
  std::vector<boost::shared_ptr<StateStoreSubscriberIf> > ifaces_;
  StateStoreSubscriberMultiface() {}
  void add(boost::shared_ptr<StateStoreSubscriberIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void UpdateState(TUpdateStateResponse& _return, const TUpdateStateRequest& params) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UpdateState(_return, params);
    }
    ifaces_[i]->UpdateState(_return, params);
    return;
  }

};

} // namespace

#endif

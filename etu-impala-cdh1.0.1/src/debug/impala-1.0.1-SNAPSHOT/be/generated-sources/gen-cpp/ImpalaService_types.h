/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ImpalaService_TYPES_H
#define ImpalaService_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "Status_types.h"
#include "beeswax_types.h"
#include "cli_service_types.h"


namespace impala {

struct TImpalaQueryOptions {
  enum type {
    ABORT_ON_ERROR = 0,
    MAX_ERRORS = 1,
    DISABLE_CODEGEN = 2,
    BATCH_SIZE = 3,
    MEM_LIMIT = 4,
    NUM_NODES = 5,
    MAX_SCAN_RANGE_LENGTH = 6,
    MAX_IO_BUFFERS = 7,
    NUM_SCANNER_THREADS = 8,
    ALLOW_UNSUPPORTED_FORMATS = 9,
    DEFAULT_ORDER_BY_LIMIT = 10,
    DEBUG_ACTION = 11,
    ABORT_ON_DEFAULT_LIMIT_EXCEEDED = 12
  };
};

extern const std::map<int, const char*> _TImpalaQueryOptions_VALUES_TO_NAMES;


class TInsertResult {
 public:

  static const char* ascii_fingerprint; // = "AED0FF6457343172D8ADAA9756E1239C";
  static const uint8_t binary_fingerprint[16]; // = {0xAE,0xD0,0xFF,0x64,0x57,0x34,0x31,0x72,0xD8,0xAD,0xAA,0x97,0x56,0xE1,0x23,0x9C};

  TInsertResult() {
  }

  virtual ~TInsertResult() throw() {}

  std::map<std::string, int64_t>  rows_appended;

  void __set_rows_appended(const std::map<std::string, int64_t> & val) {
    rows_appended = val;
  }

  bool operator == (const TInsertResult & rhs) const
  {
    if (!(rows_appended == rhs.rows_appended))
      return false;
    return true;
  }
  bool operator != (const TInsertResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TInsertResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TInsertResult &a, TInsertResult &b);

typedef struct _TPingImpalaServiceResp__isset {
  _TPingImpalaServiceResp__isset() : version(false) {}
  bool version;
} _TPingImpalaServiceResp__isset;

class TPingImpalaServiceResp {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  TPingImpalaServiceResp() : version() {
  }

  virtual ~TPingImpalaServiceResp() throw() {}

  std::string version;

  _TPingImpalaServiceResp__isset __isset;

  void __set_version(const std::string& val) {
    version = val;
    __isset.version = true;
  }

  bool operator == (const TPingImpalaServiceResp & rhs) const
  {
    if (!(version == rhs.version))
      return false;
    return true;
  }
  bool operator != (const TPingImpalaServiceResp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPingImpalaServiceResp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TPingImpalaServiceResp &a, TPingImpalaServiceResp &b);


class TResetTableReq {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  TResetTableReq() : db_name(), table_name() {
  }

  virtual ~TResetTableReq() throw() {}

  std::string db_name;
  std::string table_name;

  void __set_db_name(const std::string& val) {
    db_name = val;
  }

  void __set_table_name(const std::string& val) {
    table_name = val;
  }

  bool operator == (const TResetTableReq & rhs) const
  {
    if (!(db_name == rhs.db_name))
      return false;
    if (!(table_name == rhs.table_name))
      return false;
    return true;
  }
  bool operator != (const TResetTableReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TResetTableReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TResetTableReq &a, TResetTableReq &b);


class TResetCatalogResp {
 public:

  static const char* ascii_fingerprint; // = "5D172D269EB9D48C37F2702186BA51B0";
  static const uint8_t binary_fingerprint[16]; // = {0x5D,0x17,0x2D,0x26,0x9E,0xB9,0xD4,0x8C,0x37,0xF2,0x70,0x21,0x86,0xBA,0x51,0xB0};

  TResetCatalogResp() {
  }

  virtual ~TResetCatalogResp() throw() {}

   ::impala::TStatus status;

  void __set_status(const  ::impala::TStatus& val) {
    status = val;
  }

  bool operator == (const TResetCatalogResp & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const TResetCatalogResp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TResetCatalogResp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TResetCatalogResp &a, TResetCatalogResp &b);


class TResetTableResp {
 public:

  static const char* ascii_fingerprint; // = "5D172D269EB9D48C37F2702186BA51B0";
  static const uint8_t binary_fingerprint[16]; // = {0x5D,0x17,0x2D,0x26,0x9E,0xB9,0xD4,0x8C,0x37,0xF2,0x70,0x21,0x86,0xBA,0x51,0xB0};

  TResetTableResp() {
  }

  virtual ~TResetTableResp() throw() {}

   ::impala::TStatus status;

  void __set_status(const  ::impala::TStatus& val) {
    status = val;
  }

  bool operator == (const TResetTableResp & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const TResetTableResp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TResetTableResp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TResetTableResp &a, TResetTableResp &b);

} // namespace

#endif

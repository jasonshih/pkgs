/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ImpalaService_types.h"

#include <algorithm>

namespace impala {

int _kTImpalaQueryOptionsValues[] = {
  TImpalaQueryOptions::ABORT_ON_ERROR,
  TImpalaQueryOptions::MAX_ERRORS,
  TImpalaQueryOptions::DISABLE_CODEGEN,
  TImpalaQueryOptions::BATCH_SIZE,
  TImpalaQueryOptions::MEM_LIMIT,
  TImpalaQueryOptions::NUM_NODES,
  TImpalaQueryOptions::MAX_SCAN_RANGE_LENGTH,
  TImpalaQueryOptions::MAX_IO_BUFFERS,
  TImpalaQueryOptions::NUM_SCANNER_THREADS,
  TImpalaQueryOptions::ALLOW_UNSUPPORTED_FORMATS,
  TImpalaQueryOptions::DEFAULT_ORDER_BY_LIMIT,
  TImpalaQueryOptions::DEBUG_ACTION,
  TImpalaQueryOptions::ABORT_ON_DEFAULT_LIMIT_EXCEEDED
};
const char* _kTImpalaQueryOptionsNames[] = {
  "ABORT_ON_ERROR",
  "MAX_ERRORS",
  "DISABLE_CODEGEN",
  "BATCH_SIZE",
  "MEM_LIMIT",
  "NUM_NODES",
  "MAX_SCAN_RANGE_LENGTH",
  "MAX_IO_BUFFERS",
  "NUM_SCANNER_THREADS",
  "ALLOW_UNSUPPORTED_FORMATS",
  "DEFAULT_ORDER_BY_LIMIT",
  "DEBUG_ACTION",
  "ABORT_ON_DEFAULT_LIMIT_EXCEEDED"
};
const std::map<int, const char*> _TImpalaQueryOptions_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(13, _kTImpalaQueryOptionsValues, _kTImpalaQueryOptionsNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* TInsertResult::ascii_fingerprint = "AED0FF6457343172D8ADAA9756E1239C";
const uint8_t TInsertResult::binary_fingerprint[16] = {0xAE,0xD0,0xFF,0x64,0x57,0x34,0x31,0x72,0xD8,0xAD,0xAA,0x97,0x56,0xE1,0x23,0x9C};

uint32_t TInsertResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_rows_appended = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->rows_appended.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _ktype1;
            ::apache::thrift::protocol::TType _vtype2;
            xfer += iprot->readMapBegin(_ktype1, _vtype2, _size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              std::string _key5;
              xfer += iprot->readString(_key5);
              int64_t& _val6 = this->rows_appended[_key5];
              xfer += iprot->readI64(_val6);
            }
            xfer += iprot->readMapEnd();
          }
          isset_rows_appended = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_rows_appended)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TInsertResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  uint32_t fcnt = 0;
  xfer += oprot->writeStructBegin("TInsertResult");

  ++fcnt;
  xfer += oprot->writeFieldBegin("rows_appended", ::apache::thrift::protocol::T_MAP, 1);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->rows_appended.size()));
    std::map<std::string, int64_t> ::const_iterator _iter7;
    for (_iter7 = this->rows_appended.begin(); _iter7 != this->rows_appended.end(); ++_iter7)
    {
      xfer += oprot->writeString(_iter7->first);
      xfer += oprot->writeI64(_iter7->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TInsertResult &a, TInsertResult &b) {
  using ::std::swap;
  swap(a.rows_appended, b.rows_appended);
}

const char* TPingImpalaServiceResp::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t TPingImpalaServiceResp::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t TPingImpalaServiceResp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->version);
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TPingImpalaServiceResp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  uint32_t fcnt = 0;
  xfer += oprot->writeStructBegin("TPingImpalaServiceResp");

  ++fcnt;
  xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TPingImpalaServiceResp &a, TPingImpalaServiceResp &b) {
  using ::std::swap;
  swap(a.version, b.version);
  swap(a.__isset, b.__isset);
}

const char* TResetTableReq::ascii_fingerprint = "07A9615F837F7D0A952B595DD3020972";
const uint8_t TResetTableReq::binary_fingerprint[16] = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

uint32_t TResetTableReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_db_name = false;
  bool isset_table_name = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->db_name);
          isset_db_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table_name);
          isset_table_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_db_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_table_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TResetTableReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  uint32_t fcnt = 0;
  xfer += oprot->writeStructBegin("TResetTableReq");

  ++fcnt;
  xfer += oprot->writeFieldBegin("db_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->db_name);
  xfer += oprot->writeFieldEnd();

  ++fcnt;
  xfer += oprot->writeFieldBegin("table_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->table_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TResetTableReq &a, TResetTableReq &b) {
  using ::std::swap;
  swap(a.db_name, b.db_name);
  swap(a.table_name, b.table_name);
}

const char* TResetCatalogResp::ascii_fingerprint = "5D172D269EB9D48C37F2702186BA51B0";
const uint8_t TResetCatalogResp::binary_fingerprint[16] = {0x5D,0x17,0x2D,0x26,0x9E,0xB9,0xD4,0x8C,0x37,0xF2,0x70,0x21,0x86,0xBA,0x51,0xB0};

uint32_t TResetCatalogResp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_status = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->status.read(iprot);
          isset_status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_status)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TResetCatalogResp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  uint32_t fcnt = 0;
  xfer += oprot->writeStructBegin("TResetCatalogResp");

  ++fcnt;
  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->status.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TResetCatalogResp &a, TResetCatalogResp &b) {
  using ::std::swap;
  swap(a.status, b.status);
}

const char* TResetTableResp::ascii_fingerprint = "5D172D269EB9D48C37F2702186BA51B0";
const uint8_t TResetTableResp::binary_fingerprint[16] = {0x5D,0x17,0x2D,0x26,0x9E,0xB9,0xD4,0x8C,0x37,0xF2,0x70,0x21,0x86,0xBA,0x51,0xB0};

uint32_t TResetTableResp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_status = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->status.read(iprot);
          isset_status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_status)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TResetTableResp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  uint32_t fcnt = 0;
  xfer += oprot->writeStructBegin("TResetTableResp");

  ++fcnt;
  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->status.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TResetTableResp &a, TResetTableResp &b) {
  using ::std::swap;
  swap(a.status, b.status);
}

} // namespace

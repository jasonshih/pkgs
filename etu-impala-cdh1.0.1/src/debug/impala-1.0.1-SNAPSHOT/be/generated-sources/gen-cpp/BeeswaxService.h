/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef BeeswaxService_H
#define BeeswaxService_H

#include <thrift/TDispatchProcessor.h>
#include "beeswax_types.h"

namespace beeswax {

class BeeswaxServiceIf {
 public:
  virtual ~BeeswaxServiceIf() {}
  virtual void query(QueryHandle& _return, const Query& query) = 0;
  virtual void executeAndWait(QueryHandle& _return, const Query& query, const LogContextId& clientCtx) = 0;
  virtual void explain(QueryExplanation& _return, const Query& query) = 0;
  virtual void fetch(Results& _return, const QueryHandle& query_id, const bool start_over, const int32_t fetch_size) = 0;
  virtual QueryState::type get_state(const QueryHandle& handle) = 0;
  virtual void get_results_metadata(ResultsMetadata& _return, const QueryHandle& handle) = 0;
  virtual void echo(std::string& _return, const std::string& s) = 0;
  virtual void dump_config(std::string& _return) = 0;
  virtual void get_log(std::string& _return, const LogContextId& context) = 0;
  virtual void get_default_configuration(std::vector<ConfigVariable> & _return, const bool include_hadoop) = 0;
  virtual void close(const QueryHandle& handle) = 0;
  virtual void clean(const LogContextId& log_context) = 0;
};

class BeeswaxServiceIfFactory {
 public:
  typedef BeeswaxServiceIf Handler;

  virtual ~BeeswaxServiceIfFactory() {}

  virtual BeeswaxServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(BeeswaxServiceIf* /* handler */) = 0;
};

class BeeswaxServiceIfSingletonFactory : virtual public BeeswaxServiceIfFactory {
 public:
  BeeswaxServiceIfSingletonFactory(const boost::shared_ptr<BeeswaxServiceIf>& iface) : iface_(iface) {}
  virtual ~BeeswaxServiceIfSingletonFactory() {}

  virtual BeeswaxServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(BeeswaxServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<BeeswaxServiceIf> iface_;
};

class BeeswaxServiceNull : virtual public BeeswaxServiceIf {
 public:
  virtual ~BeeswaxServiceNull() {}
  void query(QueryHandle& /* _return */, const Query& /* query */) {
    return;
  }
  void executeAndWait(QueryHandle& /* _return */, const Query& /* query */, const LogContextId& /* clientCtx */) {
    return;
  }
  void explain(QueryExplanation& /* _return */, const Query& /* query */) {
    return;
  }
  void fetch(Results& /* _return */, const QueryHandle& /* query_id */, const bool /* start_over */, const int32_t /* fetch_size */) {
    return;
  }
  QueryState::type get_state(const QueryHandle& /* handle */) {
    QueryState::type _return = (QueryState::type)0;
    return _return;
  }
  void get_results_metadata(ResultsMetadata& /* _return */, const QueryHandle& /* handle */) {
    return;
  }
  void echo(std::string& /* _return */, const std::string& /* s */) {
    return;
  }
  void dump_config(std::string& /* _return */) {
    return;
  }
  void get_log(std::string& /* _return */, const LogContextId& /* context */) {
    return;
  }
  void get_default_configuration(std::vector<ConfigVariable> & /* _return */, const bool /* include_hadoop */) {
    return;
  }
  void close(const QueryHandle& /* handle */) {
    return;
  }
  void clean(const LogContextId& /* log_context */) {
    return;
  }
};

typedef struct _BeeswaxService_query_args__isset {
  _BeeswaxService_query_args__isset() : query(false) {}
  bool query;
} _BeeswaxService_query_args__isset;

class BeeswaxService_query_args {
 public:

  BeeswaxService_query_args() {
  }

  virtual ~BeeswaxService_query_args() throw() {}

  Query query;

  _BeeswaxService_query_args__isset __isset;

  void __set_query(const Query& val) {
    query = val;
    __isset.query = true;
  }

  bool operator == (const BeeswaxService_query_args & rhs) const
  {
    if (!(query == rhs.query))
      return false;
    return true;
  }
  bool operator != (const BeeswaxService_query_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BeeswaxService_query_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BeeswaxService_query_pargs {
 public:


  virtual ~BeeswaxService_query_pargs() throw() {}

  const Query* query;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BeeswaxService_query_result__isset {
  _BeeswaxService_query_result__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _BeeswaxService_query_result__isset;

class BeeswaxService_query_result {
 public:

  BeeswaxService_query_result() {
  }

  virtual ~BeeswaxService_query_result() throw() {}

  QueryHandle success;
  BeeswaxException error;

  _BeeswaxService_query_result__isset __isset;

  void __set_success(const QueryHandle& val) {
    success = val;
    __isset.success = true;
  }

  void __set_error(const BeeswaxException& val) {
    error = val;
    __isset.error = true;
  }

  bool operator == (const BeeswaxService_query_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const BeeswaxService_query_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BeeswaxService_query_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BeeswaxService_query_presult__isset {
  _BeeswaxService_query_presult__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _BeeswaxService_query_presult__isset;

class BeeswaxService_query_presult {
 public:


  virtual ~BeeswaxService_query_presult() throw() {}

  QueryHandle* success;
  BeeswaxException error;

  _BeeswaxService_query_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BeeswaxService_executeAndWait_args__isset {
  _BeeswaxService_executeAndWait_args__isset() : query(false), clientCtx(false) {}
  bool query;
  bool clientCtx;
} _BeeswaxService_executeAndWait_args__isset;

class BeeswaxService_executeAndWait_args {
 public:

  BeeswaxService_executeAndWait_args() : clientCtx() {
  }

  virtual ~BeeswaxService_executeAndWait_args() throw() {}

  Query query;
  LogContextId clientCtx;

  _BeeswaxService_executeAndWait_args__isset __isset;

  void __set_query(const Query& val) {
    query = val;
    __isset.query = true;
  }

  void __set_clientCtx(const LogContextId& val) {
    clientCtx = val;
    __isset.clientCtx = true;
  }

  bool operator == (const BeeswaxService_executeAndWait_args & rhs) const
  {
    if (!(query == rhs.query))
      return false;
    if (!(clientCtx == rhs.clientCtx))
      return false;
    return true;
  }
  bool operator != (const BeeswaxService_executeAndWait_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BeeswaxService_executeAndWait_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BeeswaxService_executeAndWait_pargs {
 public:


  virtual ~BeeswaxService_executeAndWait_pargs() throw() {}

  const Query* query;
  const LogContextId* clientCtx;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BeeswaxService_executeAndWait_result__isset {
  _BeeswaxService_executeAndWait_result__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _BeeswaxService_executeAndWait_result__isset;

class BeeswaxService_executeAndWait_result {
 public:

  BeeswaxService_executeAndWait_result() {
  }

  virtual ~BeeswaxService_executeAndWait_result() throw() {}

  QueryHandle success;
  BeeswaxException error;

  _BeeswaxService_executeAndWait_result__isset __isset;

  void __set_success(const QueryHandle& val) {
    success = val;
    __isset.success = true;
  }

  void __set_error(const BeeswaxException& val) {
    error = val;
    __isset.error = true;
  }

  bool operator == (const BeeswaxService_executeAndWait_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const BeeswaxService_executeAndWait_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BeeswaxService_executeAndWait_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BeeswaxService_executeAndWait_presult__isset {
  _BeeswaxService_executeAndWait_presult__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _BeeswaxService_executeAndWait_presult__isset;

class BeeswaxService_executeAndWait_presult {
 public:


  virtual ~BeeswaxService_executeAndWait_presult() throw() {}

  QueryHandle* success;
  BeeswaxException error;

  _BeeswaxService_executeAndWait_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BeeswaxService_explain_args__isset {
  _BeeswaxService_explain_args__isset() : query(false) {}
  bool query;
} _BeeswaxService_explain_args__isset;

class BeeswaxService_explain_args {
 public:

  BeeswaxService_explain_args() {
  }

  virtual ~BeeswaxService_explain_args() throw() {}

  Query query;

  _BeeswaxService_explain_args__isset __isset;

  void __set_query(const Query& val) {
    query = val;
    __isset.query = true;
  }

  bool operator == (const BeeswaxService_explain_args & rhs) const
  {
    if (!(query == rhs.query))
      return false;
    return true;
  }
  bool operator != (const BeeswaxService_explain_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BeeswaxService_explain_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BeeswaxService_explain_pargs {
 public:


  virtual ~BeeswaxService_explain_pargs() throw() {}

  const Query* query;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BeeswaxService_explain_result__isset {
  _BeeswaxService_explain_result__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _BeeswaxService_explain_result__isset;

class BeeswaxService_explain_result {
 public:

  BeeswaxService_explain_result() {
  }

  virtual ~BeeswaxService_explain_result() throw() {}

  QueryExplanation success;
  BeeswaxException error;

  _BeeswaxService_explain_result__isset __isset;

  void __set_success(const QueryExplanation& val) {
    success = val;
    __isset.success = true;
  }

  void __set_error(const BeeswaxException& val) {
    error = val;
    __isset.error = true;
  }

  bool operator == (const BeeswaxService_explain_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const BeeswaxService_explain_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BeeswaxService_explain_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BeeswaxService_explain_presult__isset {
  _BeeswaxService_explain_presult__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _BeeswaxService_explain_presult__isset;

class BeeswaxService_explain_presult {
 public:


  virtual ~BeeswaxService_explain_presult() throw() {}

  QueryExplanation* success;
  BeeswaxException error;

  _BeeswaxService_explain_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BeeswaxService_fetch_args__isset {
  _BeeswaxService_fetch_args__isset() : query_id(false), start_over(false), fetch_size(true) {}
  bool query_id;
  bool start_over;
  bool fetch_size;
} _BeeswaxService_fetch_args__isset;

class BeeswaxService_fetch_args {
 public:

  BeeswaxService_fetch_args() : start_over(0), fetch_size(-1) {
  }

  virtual ~BeeswaxService_fetch_args() throw() {}

  QueryHandle query_id;
  bool start_over;
  int32_t fetch_size;

  _BeeswaxService_fetch_args__isset __isset;

  void __set_query_id(const QueryHandle& val) {
    query_id = val;
    __isset.query_id = true;
  }

  void __set_start_over(const bool val) {
    start_over = val;
    __isset.start_over = true;
  }

  void __set_fetch_size(const int32_t val) {
    fetch_size = val;
    __isset.fetch_size = true;
  }

  bool operator == (const BeeswaxService_fetch_args & rhs) const
  {
    if (!(query_id == rhs.query_id))
      return false;
    if (!(start_over == rhs.start_over))
      return false;
    if (!(fetch_size == rhs.fetch_size))
      return false;
    return true;
  }
  bool operator != (const BeeswaxService_fetch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BeeswaxService_fetch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BeeswaxService_fetch_pargs {
 public:


  virtual ~BeeswaxService_fetch_pargs() throw() {}

  const QueryHandle* query_id;
  const bool* start_over;
  const int32_t* fetch_size;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BeeswaxService_fetch_result__isset {
  _BeeswaxService_fetch_result__isset() : success(false), error(false), error2(false) {}
  bool success;
  bool error;
  bool error2;
} _BeeswaxService_fetch_result__isset;

class BeeswaxService_fetch_result {
 public:

  BeeswaxService_fetch_result() {
  }

  virtual ~BeeswaxService_fetch_result() throw() {}

  Results success;
  QueryNotFoundException error;
  BeeswaxException error2;

  _BeeswaxService_fetch_result__isset __isset;

  void __set_success(const Results& val) {
    success = val;
    __isset.success = true;
  }

  void __set_error(const QueryNotFoundException& val) {
    error = val;
    __isset.error = true;
  }

  void __set_error2(const BeeswaxException& val) {
    error2 = val;
    __isset.error2 = true;
  }

  bool operator == (const BeeswaxService_fetch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    if (!(error2 == rhs.error2))
      return false;
    return true;
  }
  bool operator != (const BeeswaxService_fetch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BeeswaxService_fetch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BeeswaxService_fetch_presult__isset {
  _BeeswaxService_fetch_presult__isset() : success(false), error(false), error2(false) {}
  bool success;
  bool error;
  bool error2;
} _BeeswaxService_fetch_presult__isset;

class BeeswaxService_fetch_presult {
 public:


  virtual ~BeeswaxService_fetch_presult() throw() {}

  Results* success;
  QueryNotFoundException error;
  BeeswaxException error2;

  _BeeswaxService_fetch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BeeswaxService_get_state_args__isset {
  _BeeswaxService_get_state_args__isset() : handle(false) {}
  bool handle;
} _BeeswaxService_get_state_args__isset;

class BeeswaxService_get_state_args {
 public:

  BeeswaxService_get_state_args() {
  }

  virtual ~BeeswaxService_get_state_args() throw() {}

  QueryHandle handle;

  _BeeswaxService_get_state_args__isset __isset;

  void __set_handle(const QueryHandle& val) {
    handle = val;
    __isset.handle = true;
  }

  bool operator == (const BeeswaxService_get_state_args & rhs) const
  {
    if (!(handle == rhs.handle))
      return false;
    return true;
  }
  bool operator != (const BeeswaxService_get_state_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BeeswaxService_get_state_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BeeswaxService_get_state_pargs {
 public:


  virtual ~BeeswaxService_get_state_pargs() throw() {}

  const QueryHandle* handle;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BeeswaxService_get_state_result__isset {
  _BeeswaxService_get_state_result__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _BeeswaxService_get_state_result__isset;

class BeeswaxService_get_state_result {
 public:

  BeeswaxService_get_state_result() : success((QueryState::type)0) {
  }

  virtual ~BeeswaxService_get_state_result() throw() {}

  QueryState::type success;
  QueryNotFoundException error;

  _BeeswaxService_get_state_result__isset __isset;

  void __set_success(const QueryState::type val) {
    success = val;
    __isset.success = true;
  }

  void __set_error(const QueryNotFoundException& val) {
    error = val;
    __isset.error = true;
  }

  bool operator == (const BeeswaxService_get_state_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const BeeswaxService_get_state_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BeeswaxService_get_state_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BeeswaxService_get_state_presult__isset {
  _BeeswaxService_get_state_presult__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _BeeswaxService_get_state_presult__isset;

class BeeswaxService_get_state_presult {
 public:


  virtual ~BeeswaxService_get_state_presult() throw() {}

  QueryState::type* success;
  QueryNotFoundException error;

  _BeeswaxService_get_state_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BeeswaxService_get_results_metadata_args__isset {
  _BeeswaxService_get_results_metadata_args__isset() : handle(false) {}
  bool handle;
} _BeeswaxService_get_results_metadata_args__isset;

class BeeswaxService_get_results_metadata_args {
 public:

  BeeswaxService_get_results_metadata_args() {
  }

  virtual ~BeeswaxService_get_results_metadata_args() throw() {}

  QueryHandle handle;

  _BeeswaxService_get_results_metadata_args__isset __isset;

  void __set_handle(const QueryHandle& val) {
    handle = val;
    __isset.handle = true;
  }

  bool operator == (const BeeswaxService_get_results_metadata_args & rhs) const
  {
    if (!(handle == rhs.handle))
      return false;
    return true;
  }
  bool operator != (const BeeswaxService_get_results_metadata_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BeeswaxService_get_results_metadata_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BeeswaxService_get_results_metadata_pargs {
 public:


  virtual ~BeeswaxService_get_results_metadata_pargs() throw() {}

  const QueryHandle* handle;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BeeswaxService_get_results_metadata_result__isset {
  _BeeswaxService_get_results_metadata_result__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _BeeswaxService_get_results_metadata_result__isset;

class BeeswaxService_get_results_metadata_result {
 public:

  BeeswaxService_get_results_metadata_result() {
  }

  virtual ~BeeswaxService_get_results_metadata_result() throw() {}

  ResultsMetadata success;
  QueryNotFoundException error;

  _BeeswaxService_get_results_metadata_result__isset __isset;

  void __set_success(const ResultsMetadata& val) {
    success = val;
    __isset.success = true;
  }

  void __set_error(const QueryNotFoundException& val) {
    error = val;
    __isset.error = true;
  }

  bool operator == (const BeeswaxService_get_results_metadata_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const BeeswaxService_get_results_metadata_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BeeswaxService_get_results_metadata_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BeeswaxService_get_results_metadata_presult__isset {
  _BeeswaxService_get_results_metadata_presult__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _BeeswaxService_get_results_metadata_presult__isset;

class BeeswaxService_get_results_metadata_presult {
 public:


  virtual ~BeeswaxService_get_results_metadata_presult() throw() {}

  ResultsMetadata* success;
  QueryNotFoundException error;

  _BeeswaxService_get_results_metadata_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BeeswaxService_echo_args__isset {
  _BeeswaxService_echo_args__isset() : s(false) {}
  bool s;
} _BeeswaxService_echo_args__isset;

class BeeswaxService_echo_args {
 public:

  BeeswaxService_echo_args() : s() {
  }

  virtual ~BeeswaxService_echo_args() throw() {}

  std::string s;

  _BeeswaxService_echo_args__isset __isset;

  void __set_s(const std::string& val) {
    s = val;
    __isset.s = true;
  }

  bool operator == (const BeeswaxService_echo_args & rhs) const
  {
    if (!(s == rhs.s))
      return false;
    return true;
  }
  bool operator != (const BeeswaxService_echo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BeeswaxService_echo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BeeswaxService_echo_pargs {
 public:


  virtual ~BeeswaxService_echo_pargs() throw() {}

  const std::string* s;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BeeswaxService_echo_result__isset {
  _BeeswaxService_echo_result__isset() : success(false) {}
  bool success;
} _BeeswaxService_echo_result__isset;

class BeeswaxService_echo_result {
 public:

  BeeswaxService_echo_result() : success() {
  }

  virtual ~BeeswaxService_echo_result() throw() {}

  std::string success;

  _BeeswaxService_echo_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
    __isset.success = true;
  }

  bool operator == (const BeeswaxService_echo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BeeswaxService_echo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BeeswaxService_echo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BeeswaxService_echo_presult__isset {
  _BeeswaxService_echo_presult__isset() : success(false) {}
  bool success;
} _BeeswaxService_echo_presult__isset;

class BeeswaxService_echo_presult {
 public:


  virtual ~BeeswaxService_echo_presult() throw() {}

  std::string* success;

  _BeeswaxService_echo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class BeeswaxService_dump_config_args {
 public:

  BeeswaxService_dump_config_args() {
  }

  virtual ~BeeswaxService_dump_config_args() throw() {}


  bool operator == (const BeeswaxService_dump_config_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const BeeswaxService_dump_config_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BeeswaxService_dump_config_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BeeswaxService_dump_config_pargs {
 public:


  virtual ~BeeswaxService_dump_config_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BeeswaxService_dump_config_result__isset {
  _BeeswaxService_dump_config_result__isset() : success(false) {}
  bool success;
} _BeeswaxService_dump_config_result__isset;

class BeeswaxService_dump_config_result {
 public:

  BeeswaxService_dump_config_result() : success() {
  }

  virtual ~BeeswaxService_dump_config_result() throw() {}

  std::string success;

  _BeeswaxService_dump_config_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
    __isset.success = true;
  }

  bool operator == (const BeeswaxService_dump_config_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BeeswaxService_dump_config_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BeeswaxService_dump_config_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BeeswaxService_dump_config_presult__isset {
  _BeeswaxService_dump_config_presult__isset() : success(false) {}
  bool success;
} _BeeswaxService_dump_config_presult__isset;

class BeeswaxService_dump_config_presult {
 public:


  virtual ~BeeswaxService_dump_config_presult() throw() {}

  std::string* success;

  _BeeswaxService_dump_config_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BeeswaxService_get_log_args__isset {
  _BeeswaxService_get_log_args__isset() : context(false) {}
  bool context;
} _BeeswaxService_get_log_args__isset;

class BeeswaxService_get_log_args {
 public:

  BeeswaxService_get_log_args() : context() {
  }

  virtual ~BeeswaxService_get_log_args() throw() {}

  LogContextId context;

  _BeeswaxService_get_log_args__isset __isset;

  void __set_context(const LogContextId& val) {
    context = val;
    __isset.context = true;
  }

  bool operator == (const BeeswaxService_get_log_args & rhs) const
  {
    if (!(context == rhs.context))
      return false;
    return true;
  }
  bool operator != (const BeeswaxService_get_log_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BeeswaxService_get_log_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BeeswaxService_get_log_pargs {
 public:


  virtual ~BeeswaxService_get_log_pargs() throw() {}

  const LogContextId* context;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BeeswaxService_get_log_result__isset {
  _BeeswaxService_get_log_result__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _BeeswaxService_get_log_result__isset;

class BeeswaxService_get_log_result {
 public:

  BeeswaxService_get_log_result() : success() {
  }

  virtual ~BeeswaxService_get_log_result() throw() {}

  std::string success;
  QueryNotFoundException error;

  _BeeswaxService_get_log_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
    __isset.success = true;
  }

  void __set_error(const QueryNotFoundException& val) {
    error = val;
    __isset.error = true;
  }

  bool operator == (const BeeswaxService_get_log_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const BeeswaxService_get_log_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BeeswaxService_get_log_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BeeswaxService_get_log_presult__isset {
  _BeeswaxService_get_log_presult__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _BeeswaxService_get_log_presult__isset;

class BeeswaxService_get_log_presult {
 public:


  virtual ~BeeswaxService_get_log_presult() throw() {}

  std::string* success;
  QueryNotFoundException error;

  _BeeswaxService_get_log_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BeeswaxService_get_default_configuration_args__isset {
  _BeeswaxService_get_default_configuration_args__isset() : include_hadoop(false) {}
  bool include_hadoop;
} _BeeswaxService_get_default_configuration_args__isset;

class BeeswaxService_get_default_configuration_args {
 public:

  BeeswaxService_get_default_configuration_args() : include_hadoop(0) {
  }

  virtual ~BeeswaxService_get_default_configuration_args() throw() {}

  bool include_hadoop;

  _BeeswaxService_get_default_configuration_args__isset __isset;

  void __set_include_hadoop(const bool val) {
    include_hadoop = val;
    __isset.include_hadoop = true;
  }

  bool operator == (const BeeswaxService_get_default_configuration_args & rhs) const
  {
    if (!(include_hadoop == rhs.include_hadoop))
      return false;
    return true;
  }
  bool operator != (const BeeswaxService_get_default_configuration_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BeeswaxService_get_default_configuration_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BeeswaxService_get_default_configuration_pargs {
 public:


  virtual ~BeeswaxService_get_default_configuration_pargs() throw() {}

  const bool* include_hadoop;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BeeswaxService_get_default_configuration_result__isset {
  _BeeswaxService_get_default_configuration_result__isset() : success(false) {}
  bool success;
} _BeeswaxService_get_default_configuration_result__isset;

class BeeswaxService_get_default_configuration_result {
 public:

  BeeswaxService_get_default_configuration_result() {
  }

  virtual ~BeeswaxService_get_default_configuration_result() throw() {}

  std::vector<ConfigVariable>  success;

  _BeeswaxService_get_default_configuration_result__isset __isset;

  void __set_success(const std::vector<ConfigVariable> & val) {
    success = val;
    __isset.success = true;
  }

  bool operator == (const BeeswaxService_get_default_configuration_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BeeswaxService_get_default_configuration_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BeeswaxService_get_default_configuration_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BeeswaxService_get_default_configuration_presult__isset {
  _BeeswaxService_get_default_configuration_presult__isset() : success(false) {}
  bool success;
} _BeeswaxService_get_default_configuration_presult__isset;

class BeeswaxService_get_default_configuration_presult {
 public:


  virtual ~BeeswaxService_get_default_configuration_presult() throw() {}

  std::vector<ConfigVariable> * success;

  _BeeswaxService_get_default_configuration_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BeeswaxService_close_args__isset {
  _BeeswaxService_close_args__isset() : handle(false) {}
  bool handle;
} _BeeswaxService_close_args__isset;

class BeeswaxService_close_args {
 public:

  BeeswaxService_close_args() {
  }

  virtual ~BeeswaxService_close_args() throw() {}

  QueryHandle handle;

  _BeeswaxService_close_args__isset __isset;

  void __set_handle(const QueryHandle& val) {
    handle = val;
    __isset.handle = true;
  }

  bool operator == (const BeeswaxService_close_args & rhs) const
  {
    if (!(handle == rhs.handle))
      return false;
    return true;
  }
  bool operator != (const BeeswaxService_close_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BeeswaxService_close_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BeeswaxService_close_pargs {
 public:


  virtual ~BeeswaxService_close_pargs() throw() {}

  const QueryHandle* handle;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BeeswaxService_close_result__isset {
  _BeeswaxService_close_result__isset() : error(false), error2(false) {}
  bool error;
  bool error2;
} _BeeswaxService_close_result__isset;

class BeeswaxService_close_result {
 public:

  BeeswaxService_close_result() {
  }

  virtual ~BeeswaxService_close_result() throw() {}

  QueryNotFoundException error;
  BeeswaxException error2;

  _BeeswaxService_close_result__isset __isset;

  void __set_error(const QueryNotFoundException& val) {
    error = val;
    __isset.error = true;
  }

  void __set_error2(const BeeswaxException& val) {
    error2 = val;
    __isset.error2 = true;
  }

  bool operator == (const BeeswaxService_close_result & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(error2 == rhs.error2))
      return false;
    return true;
  }
  bool operator != (const BeeswaxService_close_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BeeswaxService_close_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BeeswaxService_close_presult__isset {
  _BeeswaxService_close_presult__isset() : error(false), error2(false) {}
  bool error;
  bool error2;
} _BeeswaxService_close_presult__isset;

class BeeswaxService_close_presult {
 public:


  virtual ~BeeswaxService_close_presult() throw() {}

  QueryNotFoundException error;
  BeeswaxException error2;

  _BeeswaxService_close_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BeeswaxService_clean_args__isset {
  _BeeswaxService_clean_args__isset() : log_context(false) {}
  bool log_context;
} _BeeswaxService_clean_args__isset;

class BeeswaxService_clean_args {
 public:

  BeeswaxService_clean_args() : log_context() {
  }

  virtual ~BeeswaxService_clean_args() throw() {}

  LogContextId log_context;

  _BeeswaxService_clean_args__isset __isset;

  void __set_log_context(const LogContextId& val) {
    log_context = val;
    __isset.log_context = true;
  }

  bool operator == (const BeeswaxService_clean_args & rhs) const
  {
    if (!(log_context == rhs.log_context))
      return false;
    return true;
  }
  bool operator != (const BeeswaxService_clean_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BeeswaxService_clean_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BeeswaxService_clean_pargs {
 public:


  virtual ~BeeswaxService_clean_pargs() throw() {}

  const LogContextId* log_context;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BeeswaxService_clean_result {
 public:

  BeeswaxService_clean_result() {
  }

  virtual ~BeeswaxService_clean_result() throw() {}


  bool operator == (const BeeswaxService_clean_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const BeeswaxService_clean_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BeeswaxService_clean_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BeeswaxService_clean_presult {
 public:


  virtual ~BeeswaxService_clean_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class BeeswaxServiceClient : virtual public BeeswaxServiceIf {
 public:
  BeeswaxServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  BeeswaxServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void query(QueryHandle& _return, const Query& query);
  void send_query(const Query& query);
  void recv_query(QueryHandle& _return);
  void executeAndWait(QueryHandle& _return, const Query& query, const LogContextId& clientCtx);
  void send_executeAndWait(const Query& query, const LogContextId& clientCtx);
  void recv_executeAndWait(QueryHandle& _return);
  void explain(QueryExplanation& _return, const Query& query);
  void send_explain(const Query& query);
  void recv_explain(QueryExplanation& _return);
  void fetch(Results& _return, const QueryHandle& query_id, const bool start_over, const int32_t fetch_size);
  void send_fetch(const QueryHandle& query_id, const bool start_over, const int32_t fetch_size);
  void recv_fetch(Results& _return);
  QueryState::type get_state(const QueryHandle& handle);
  void send_get_state(const QueryHandle& handle);
  QueryState::type recv_get_state();
  void get_results_metadata(ResultsMetadata& _return, const QueryHandle& handle);
  void send_get_results_metadata(const QueryHandle& handle);
  void recv_get_results_metadata(ResultsMetadata& _return);
  void echo(std::string& _return, const std::string& s);
  void send_echo(const std::string& s);
  void recv_echo(std::string& _return);
  void dump_config(std::string& _return);
  void send_dump_config();
  void recv_dump_config(std::string& _return);
  void get_log(std::string& _return, const LogContextId& context);
  void send_get_log(const LogContextId& context);
  void recv_get_log(std::string& _return);
  void get_default_configuration(std::vector<ConfigVariable> & _return, const bool include_hadoop);
  void send_get_default_configuration(const bool include_hadoop);
  void recv_get_default_configuration(std::vector<ConfigVariable> & _return);
  void close(const QueryHandle& handle);
  void send_close(const QueryHandle& handle);
  void recv_close();
  void clean(const LogContextId& log_context);
  void send_clean(const LogContextId& log_context);
  void recv_clean();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class BeeswaxServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<BeeswaxServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (BeeswaxServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_query(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_executeAndWait(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_explain(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_state(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_results_metadata(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_echo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_dump_config(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_log(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_default_configuration(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_close(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clean(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  BeeswaxServiceProcessor(boost::shared_ptr<BeeswaxServiceIf> iface) :
    iface_(iface) {
    processMap_["query"] = &BeeswaxServiceProcessor::process_query;
    processMap_["executeAndWait"] = &BeeswaxServiceProcessor::process_executeAndWait;
    processMap_["explain"] = &BeeswaxServiceProcessor::process_explain;
    processMap_["fetch"] = &BeeswaxServiceProcessor::process_fetch;
    processMap_["get_state"] = &BeeswaxServiceProcessor::process_get_state;
    processMap_["get_results_metadata"] = &BeeswaxServiceProcessor::process_get_results_metadata;
    processMap_["echo"] = &BeeswaxServiceProcessor::process_echo;
    processMap_["dump_config"] = &BeeswaxServiceProcessor::process_dump_config;
    processMap_["get_log"] = &BeeswaxServiceProcessor::process_get_log;
    processMap_["get_default_configuration"] = &BeeswaxServiceProcessor::process_get_default_configuration;
    processMap_["close"] = &BeeswaxServiceProcessor::process_close;
    processMap_["clean"] = &BeeswaxServiceProcessor::process_clean;
  }

  virtual ~BeeswaxServiceProcessor() {}
};

class BeeswaxServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  BeeswaxServiceProcessorFactory(const ::boost::shared_ptr< BeeswaxServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< BeeswaxServiceIfFactory > handlerFactory_;
};

class BeeswaxServiceMultiface : virtual public BeeswaxServiceIf {
 public:
  BeeswaxServiceMultiface(std::vector<boost::shared_ptr<BeeswaxServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~BeeswaxServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<BeeswaxServiceIf> > ifaces_;
  BeeswaxServiceMultiface() {}
  void add(boost::shared_ptr<BeeswaxServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void query(QueryHandle& _return, const Query& query) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->query(_return, query);
    }
    ifaces_[i]->query(_return, query);
    return;
  }

  void executeAndWait(QueryHandle& _return, const Query& query, const LogContextId& clientCtx) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->executeAndWait(_return, query, clientCtx);
    }
    ifaces_[i]->executeAndWait(_return, query, clientCtx);
    return;
  }

  void explain(QueryExplanation& _return, const Query& query) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->explain(_return, query);
    }
    ifaces_[i]->explain(_return, query);
    return;
  }

  void fetch(Results& _return, const QueryHandle& query_id, const bool start_over, const int32_t fetch_size) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetch(_return, query_id, start_over, fetch_size);
    }
    ifaces_[i]->fetch(_return, query_id, start_over, fetch_size);
    return;
  }

  QueryState::type get_state(const QueryHandle& handle) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_state(handle);
    }
    return ifaces_[i]->get_state(handle);
  }

  void get_results_metadata(ResultsMetadata& _return, const QueryHandle& handle) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_results_metadata(_return, handle);
    }
    ifaces_[i]->get_results_metadata(_return, handle);
    return;
  }

  void echo(std::string& _return, const std::string& s) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->echo(_return, s);
    }
    ifaces_[i]->echo(_return, s);
    return;
  }

  void dump_config(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->dump_config(_return);
    }
    ifaces_[i]->dump_config(_return);
    return;
  }

  void get_log(std::string& _return, const LogContextId& context) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_log(_return, context);
    }
    ifaces_[i]->get_log(_return, context);
    return;
  }

  void get_default_configuration(std::vector<ConfigVariable> & _return, const bool include_hadoop) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_default_configuration(_return, include_hadoop);
    }
    ifaces_[i]->get_default_configuration(_return, include_hadoop);
    return;
  }

  void close(const QueryHandle& handle) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->close(handle);
    }
    ifaces_[i]->close(handle);
  }

  void clean(const LogContextId& log_context) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clean(log_context);
    }
    ifaces_[i]->clean(log_context);
  }

};

} // namespace

#endif

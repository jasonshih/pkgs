/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ImpalaInternalService_H
#define ImpalaInternalService_H

#include <thrift/TDispatchProcessor.h>
#include "ImpalaInternalService_types.h"

namespace impala {

class ImpalaInternalServiceIf {
 public:
  virtual ~ImpalaInternalServiceIf() {}
  virtual void ExecPlanFragment(TExecPlanFragmentResult& _return, const TExecPlanFragmentParams& params) = 0;
  virtual void ReportExecStatus(TReportExecStatusResult& _return, const TReportExecStatusParams& params) = 0;
  virtual void CancelPlanFragment(TCancelPlanFragmentResult& _return, const TCancelPlanFragmentParams& params) = 0;
  virtual void TransmitData(TTransmitDataResult& _return, const TTransmitDataParams& params) = 0;
};

class ImpalaInternalServiceIfFactory {
 public:
  typedef ImpalaInternalServiceIf Handler;

  virtual ~ImpalaInternalServiceIfFactory() {}

  virtual ImpalaInternalServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ImpalaInternalServiceIf* /* handler */) = 0;
};

class ImpalaInternalServiceIfSingletonFactory : virtual public ImpalaInternalServiceIfFactory {
 public:
  ImpalaInternalServiceIfSingletonFactory(const boost::shared_ptr<ImpalaInternalServiceIf>& iface) : iface_(iface) {}
  virtual ~ImpalaInternalServiceIfSingletonFactory() {}

  virtual ImpalaInternalServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ImpalaInternalServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<ImpalaInternalServiceIf> iface_;
};

class ImpalaInternalServiceNull : virtual public ImpalaInternalServiceIf {
 public:
  virtual ~ImpalaInternalServiceNull() {}
  void ExecPlanFragment(TExecPlanFragmentResult& /* _return */, const TExecPlanFragmentParams& /* params */) {
    return;
  }
  void ReportExecStatus(TReportExecStatusResult& /* _return */, const TReportExecStatusParams& /* params */) {
    return;
  }
  void CancelPlanFragment(TCancelPlanFragmentResult& /* _return */, const TCancelPlanFragmentParams& /* params */) {
    return;
  }
  void TransmitData(TTransmitDataResult& /* _return */, const TTransmitDataParams& /* params */) {
    return;
  }
};

typedef struct _ImpalaInternalService_ExecPlanFragment_args__isset {
  _ImpalaInternalService_ExecPlanFragment_args__isset() : params(false) {}
  bool params;
} _ImpalaInternalService_ExecPlanFragment_args__isset;

class ImpalaInternalService_ExecPlanFragment_args {
 public:

  ImpalaInternalService_ExecPlanFragment_args() {
  }

  virtual ~ImpalaInternalService_ExecPlanFragment_args() throw() {}

  TExecPlanFragmentParams params;

  _ImpalaInternalService_ExecPlanFragment_args__isset __isset;

  void __set_params(const TExecPlanFragmentParams& val) {
    params = val;
    __isset.params = true;
  }

  bool operator == (const ImpalaInternalService_ExecPlanFragment_args & rhs) const
  {
    if (!(params == rhs.params))
      return false;
    return true;
  }
  bool operator != (const ImpalaInternalService_ExecPlanFragment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImpalaInternalService_ExecPlanFragment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ImpalaInternalService_ExecPlanFragment_pargs {
 public:


  virtual ~ImpalaInternalService_ExecPlanFragment_pargs() throw() {}

  const TExecPlanFragmentParams* params;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ImpalaInternalService_ExecPlanFragment_result__isset {
  _ImpalaInternalService_ExecPlanFragment_result__isset() : success(false) {}
  bool success;
} _ImpalaInternalService_ExecPlanFragment_result__isset;

class ImpalaInternalService_ExecPlanFragment_result {
 public:

  ImpalaInternalService_ExecPlanFragment_result() {
  }

  virtual ~ImpalaInternalService_ExecPlanFragment_result() throw() {}

  TExecPlanFragmentResult success;

  _ImpalaInternalService_ExecPlanFragment_result__isset __isset;

  void __set_success(const TExecPlanFragmentResult& val) {
    success = val;
    __isset.success = true;
  }

  bool operator == (const ImpalaInternalService_ExecPlanFragment_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ImpalaInternalService_ExecPlanFragment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImpalaInternalService_ExecPlanFragment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ImpalaInternalService_ExecPlanFragment_presult__isset {
  _ImpalaInternalService_ExecPlanFragment_presult__isset() : success(false) {}
  bool success;
} _ImpalaInternalService_ExecPlanFragment_presult__isset;

class ImpalaInternalService_ExecPlanFragment_presult {
 public:


  virtual ~ImpalaInternalService_ExecPlanFragment_presult() throw() {}

  TExecPlanFragmentResult* success;

  _ImpalaInternalService_ExecPlanFragment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ImpalaInternalService_ReportExecStatus_args__isset {
  _ImpalaInternalService_ReportExecStatus_args__isset() : params(false) {}
  bool params;
} _ImpalaInternalService_ReportExecStatus_args__isset;

class ImpalaInternalService_ReportExecStatus_args {
 public:

  ImpalaInternalService_ReportExecStatus_args() {
  }

  virtual ~ImpalaInternalService_ReportExecStatus_args() throw() {}

  TReportExecStatusParams params;

  _ImpalaInternalService_ReportExecStatus_args__isset __isset;

  void __set_params(const TReportExecStatusParams& val) {
    params = val;
    __isset.params = true;
  }

  bool operator == (const ImpalaInternalService_ReportExecStatus_args & rhs) const
  {
    if (!(params == rhs.params))
      return false;
    return true;
  }
  bool operator != (const ImpalaInternalService_ReportExecStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImpalaInternalService_ReportExecStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ImpalaInternalService_ReportExecStatus_pargs {
 public:


  virtual ~ImpalaInternalService_ReportExecStatus_pargs() throw() {}

  const TReportExecStatusParams* params;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ImpalaInternalService_ReportExecStatus_result__isset {
  _ImpalaInternalService_ReportExecStatus_result__isset() : success(false) {}
  bool success;
} _ImpalaInternalService_ReportExecStatus_result__isset;

class ImpalaInternalService_ReportExecStatus_result {
 public:

  ImpalaInternalService_ReportExecStatus_result() {
  }

  virtual ~ImpalaInternalService_ReportExecStatus_result() throw() {}

  TReportExecStatusResult success;

  _ImpalaInternalService_ReportExecStatus_result__isset __isset;

  void __set_success(const TReportExecStatusResult& val) {
    success = val;
    __isset.success = true;
  }

  bool operator == (const ImpalaInternalService_ReportExecStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ImpalaInternalService_ReportExecStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImpalaInternalService_ReportExecStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ImpalaInternalService_ReportExecStatus_presult__isset {
  _ImpalaInternalService_ReportExecStatus_presult__isset() : success(false) {}
  bool success;
} _ImpalaInternalService_ReportExecStatus_presult__isset;

class ImpalaInternalService_ReportExecStatus_presult {
 public:


  virtual ~ImpalaInternalService_ReportExecStatus_presult() throw() {}

  TReportExecStatusResult* success;

  _ImpalaInternalService_ReportExecStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ImpalaInternalService_CancelPlanFragment_args__isset {
  _ImpalaInternalService_CancelPlanFragment_args__isset() : params(false) {}
  bool params;
} _ImpalaInternalService_CancelPlanFragment_args__isset;

class ImpalaInternalService_CancelPlanFragment_args {
 public:

  ImpalaInternalService_CancelPlanFragment_args() {
  }

  virtual ~ImpalaInternalService_CancelPlanFragment_args() throw() {}

  TCancelPlanFragmentParams params;

  _ImpalaInternalService_CancelPlanFragment_args__isset __isset;

  void __set_params(const TCancelPlanFragmentParams& val) {
    params = val;
    __isset.params = true;
  }

  bool operator == (const ImpalaInternalService_CancelPlanFragment_args & rhs) const
  {
    if (!(params == rhs.params))
      return false;
    return true;
  }
  bool operator != (const ImpalaInternalService_CancelPlanFragment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImpalaInternalService_CancelPlanFragment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ImpalaInternalService_CancelPlanFragment_pargs {
 public:


  virtual ~ImpalaInternalService_CancelPlanFragment_pargs() throw() {}

  const TCancelPlanFragmentParams* params;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ImpalaInternalService_CancelPlanFragment_result__isset {
  _ImpalaInternalService_CancelPlanFragment_result__isset() : success(false) {}
  bool success;
} _ImpalaInternalService_CancelPlanFragment_result__isset;

class ImpalaInternalService_CancelPlanFragment_result {
 public:

  ImpalaInternalService_CancelPlanFragment_result() {
  }

  virtual ~ImpalaInternalService_CancelPlanFragment_result() throw() {}

  TCancelPlanFragmentResult success;

  _ImpalaInternalService_CancelPlanFragment_result__isset __isset;

  void __set_success(const TCancelPlanFragmentResult& val) {
    success = val;
    __isset.success = true;
  }

  bool operator == (const ImpalaInternalService_CancelPlanFragment_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ImpalaInternalService_CancelPlanFragment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImpalaInternalService_CancelPlanFragment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ImpalaInternalService_CancelPlanFragment_presult__isset {
  _ImpalaInternalService_CancelPlanFragment_presult__isset() : success(false) {}
  bool success;
} _ImpalaInternalService_CancelPlanFragment_presult__isset;

class ImpalaInternalService_CancelPlanFragment_presult {
 public:


  virtual ~ImpalaInternalService_CancelPlanFragment_presult() throw() {}

  TCancelPlanFragmentResult* success;

  _ImpalaInternalService_CancelPlanFragment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ImpalaInternalService_TransmitData_args__isset {
  _ImpalaInternalService_TransmitData_args__isset() : params(false) {}
  bool params;
} _ImpalaInternalService_TransmitData_args__isset;

class ImpalaInternalService_TransmitData_args {
 public:

  ImpalaInternalService_TransmitData_args() {
  }

  virtual ~ImpalaInternalService_TransmitData_args() throw() {}

  TTransmitDataParams params;

  _ImpalaInternalService_TransmitData_args__isset __isset;

  void __set_params(const TTransmitDataParams& val) {
    params = val;
    __isset.params = true;
  }

  bool operator == (const ImpalaInternalService_TransmitData_args & rhs) const
  {
    if (!(params == rhs.params))
      return false;
    return true;
  }
  bool operator != (const ImpalaInternalService_TransmitData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImpalaInternalService_TransmitData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ImpalaInternalService_TransmitData_pargs {
 public:


  virtual ~ImpalaInternalService_TransmitData_pargs() throw() {}

  const TTransmitDataParams* params;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ImpalaInternalService_TransmitData_result__isset {
  _ImpalaInternalService_TransmitData_result__isset() : success(false) {}
  bool success;
} _ImpalaInternalService_TransmitData_result__isset;

class ImpalaInternalService_TransmitData_result {
 public:

  ImpalaInternalService_TransmitData_result() {
  }

  virtual ~ImpalaInternalService_TransmitData_result() throw() {}

  TTransmitDataResult success;

  _ImpalaInternalService_TransmitData_result__isset __isset;

  void __set_success(const TTransmitDataResult& val) {
    success = val;
    __isset.success = true;
  }

  bool operator == (const ImpalaInternalService_TransmitData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ImpalaInternalService_TransmitData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImpalaInternalService_TransmitData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ImpalaInternalService_TransmitData_presult__isset {
  _ImpalaInternalService_TransmitData_presult__isset() : success(false) {}
  bool success;
} _ImpalaInternalService_TransmitData_presult__isset;

class ImpalaInternalService_TransmitData_presult {
 public:


  virtual ~ImpalaInternalService_TransmitData_presult() throw() {}

  TTransmitDataResult* success;

  _ImpalaInternalService_TransmitData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ImpalaInternalServiceClient : virtual public ImpalaInternalServiceIf {
 public:
  ImpalaInternalServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ImpalaInternalServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ExecPlanFragment(TExecPlanFragmentResult& _return, const TExecPlanFragmentParams& params);
  void send_ExecPlanFragment(const TExecPlanFragmentParams& params);
  void recv_ExecPlanFragment(TExecPlanFragmentResult& _return);
  void ReportExecStatus(TReportExecStatusResult& _return, const TReportExecStatusParams& params);
  void send_ReportExecStatus(const TReportExecStatusParams& params);
  void recv_ReportExecStatus(TReportExecStatusResult& _return);
  void CancelPlanFragment(TCancelPlanFragmentResult& _return, const TCancelPlanFragmentParams& params);
  void send_CancelPlanFragment(const TCancelPlanFragmentParams& params);
  void recv_CancelPlanFragment(TCancelPlanFragmentResult& _return);
  void TransmitData(TTransmitDataResult& _return, const TTransmitDataParams& params);
  void send_TransmitData(const TTransmitDataParams& params);
  void recv_TransmitData(TTransmitDataResult& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ImpalaInternalServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ImpalaInternalServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ImpalaInternalServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ExecPlanFragment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ReportExecStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_CancelPlanFragment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_TransmitData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ImpalaInternalServiceProcessor(boost::shared_ptr<ImpalaInternalServiceIf> iface) :
    iface_(iface) {
    processMap_["ExecPlanFragment"] = &ImpalaInternalServiceProcessor::process_ExecPlanFragment;
    processMap_["ReportExecStatus"] = &ImpalaInternalServiceProcessor::process_ReportExecStatus;
    processMap_["CancelPlanFragment"] = &ImpalaInternalServiceProcessor::process_CancelPlanFragment;
    processMap_["TransmitData"] = &ImpalaInternalServiceProcessor::process_TransmitData;
  }

  virtual ~ImpalaInternalServiceProcessor() {}
};

class ImpalaInternalServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ImpalaInternalServiceProcessorFactory(const ::boost::shared_ptr< ImpalaInternalServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ImpalaInternalServiceIfFactory > handlerFactory_;
};

class ImpalaInternalServiceMultiface : virtual public ImpalaInternalServiceIf {
 public:
  ImpalaInternalServiceMultiface(std::vector<boost::shared_ptr<ImpalaInternalServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ImpalaInternalServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ImpalaInternalServiceIf> > ifaces_;
  ImpalaInternalServiceMultiface() {}
  void add(boost::shared_ptr<ImpalaInternalServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ExecPlanFragment(TExecPlanFragmentResult& _return, const TExecPlanFragmentParams& params) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ExecPlanFragment(_return, params);
    }
    ifaces_[i]->ExecPlanFragment(_return, params);
    return;
  }

  void ReportExecStatus(TReportExecStatusResult& _return, const TReportExecStatusParams& params) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ReportExecStatus(_return, params);
    }
    ifaces_[i]->ReportExecStatus(_return, params);
    return;
  }

  void CancelPlanFragment(TCancelPlanFragmentResult& _return, const TCancelPlanFragmentParams& params) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CancelPlanFragment(_return, params);
    }
    ifaces_[i]->CancelPlanFragment(_return, params);
    return;
  }

  void TransmitData(TTransmitDataResult& _return, const TTransmitDataParams& params) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->TransmitData(_return, params);
    }
    ifaces_[i]->TransmitData(_return, params);
    return;
  }

};

} // namespace

#endif
